@page "/Cart"
@inject IShoppingCartStorage ShoppingCartStorage
@inject IUserEndpoint UserEndpoint
@inject IOrderEndpoint OrderEndpoint
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Cart</PageTitle>

@if (string.IsNullOrWhiteSpace(errorMessage) is false)
{
    <MudAlert Severity="Severity.Error" Elevation="3">
        @errorMessage
    </MudAlert>
}

<MudGrid Class="mt-3">
    <MudItem xs="9">
        @if (shoppingCart?.CartItems?.Count <= 0)
        {
            <MudAlert Severity="Severity.Normal" Variant="Variant.Filled" Elevation="3">
                <MudText>
                    It seems you do not have any items in your shopping cart list.
                </MudText>
                <MudText>
                    Please add items to your shopping cart list.
                </MudText>
            </MudAlert>
        }
        else
        {
            <MudGrid>
                <MudVirtualize Items="GetCombinedCartItems()" Context="c" OverscanCount="5">
                    <ShoppingCartItemTemplate @key="@c.Artifact.Id" CartItem="c"
                                              RemoveEvent="() =>  RemoveFromCartAsync(c)" />
                </MudVirtualize>
            </MudGrid>
        }
    </MudItem>
    <MudItem xs="3">
        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.h5" Class="fw-bold text-uppercase">
                    <MudIcon Icon="@Icons.Material.Filled.ShoppingCart"/> Shopping Cart
                </MudText>
                <MudDivider Class="mt-3 mb-3"/>
            </MudItem>
            <MudItem xs="12">
                <MudText Typo="Typo.body1" Class="fw-bold text-uppercase">
                    Information
                </MudText>
                <MudDivider />
                <MudItem xs="12">
                    <MudText>You have a total of @totalItems items in your cart.</MudText>
                    <MudItem>
                        <MudText Color="Color.Default">The total price is: </MudText>
                        <MudText Color="Color.Error" Class="mt-1">@totalPrice &euro;</MudText>
                    </MudItem>
                </MudItem>
                <MudDivider Class="mt-3 mb-3"/>
                <MudItem xs="12">
                    <MudButton OnClick="CheckoutAsync" Variant="Variant.Filled" Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.ShoppingCartCheckout" Disabled="!CanCheckout()">
                        Check out
                    </MudButton>
                </MudItem>
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>

@code {
    private UserModel loggedInUser = new();
    private ShoppingCartModel shoppingCart = new();

    private decimal totalPrice = 0;
    private int totalItems = 0;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        shoppingCart = await ShoppingCartStorage.GetShoppingCartAsync();
        CalculatePriceAndItems();

        loggedInUser = await AuthProvider.GetUserFromAuth(UserEndpoint);
    }

    private void CalculatePriceAndItems()
    {
        decimal price = 0;
        int itemCounts = 0;

        var uniqueArtifacts = new Dictionary<int, int>();

        foreach (var item in shoppingCart.CartItems)
        {
            if (uniqueArtifacts.ContainsKey(item.Artifact.Id) is false)
            {
                uniqueArtifacts[item.Artifact.Id] = 0;
            }

            uniqueArtifacts[item.Artifact.Id] += item.Quantity;
        }

        foreach (var kvp in uniqueArtifacts)
        {
            price += (decimal)shoppingCart.CartItems.First(i => i.Artifact.Id == kvp.Key).Artifact.Price * kvp.Value;
            itemCounts += kvp.Value;
        }

        totalPrice = price;
        totalItems = itemCounts;
    }

    private List<CartItemModel> GetCombinedCartItems()
    {
        var combinedCartItems = new List<CartItemModel>();

        foreach (var groupedItem in shoppingCart.CartItems.GroupBy(item => item.Artifact.Name))
        {
            var artifact = groupedItem.First().Artifact;
            var totalQuantity = groupedItem.Sum(item => item.Quantity);

            combinedCartItems.Add(new CartItemModel
                {
                    Artifact = artifact,
                    Quantity = totalQuantity
                });
        }

        return combinedCartItems;
    }

    private OrderModel GetOrder()
    {
        return new OrderModel()
        {
            UserId = loggedInUser.Id,
            TotalPrice = totalPrice,
            IsCanceled = false,
            IsComplete = false,
            DateOrdered = DateTime.UtcNow,
        };
    }

    private List<OrderDetailsModel> GetOrderDetails()
    {
        var orderDetails = new List<OrderDetailsModel>();

        foreach (var item in shoppingCart.CartItems)
        {
            var details = new OrderDetailsModel
                {
                    ArtifactId = item.Artifact.Id,
                    Quantity = item.Quantity,
                };

            orderDetails.Add(details);
        }

        return orderDetails;
    }

    private bool CanCheckout()
    {
        if (shoppingCart?.CartItems?.Count <= 0 || loggedInUser is null)
        {
            return false;
        }

        return true;
    }

    private async Task RemoveFromCartAsync(CartItemModel cartItem)
    {
        var item = shoppingCart.CartItems.FirstOrDefault(
            c => c.Artifact.Id == cartItem.Artifact.Id &&
            c.Quantity == cartItem.Quantity
        );

        shoppingCart.CartItems.Remove(item);
        await ShoppingCartStorage.SaveShoppingCartAsync(shoppingCart);
    }

    private async Task CheckoutAsync()
    {
        if (CanCheckout() is false)
        {
            return;
        }

        try
        {
            errorMessage = "";

            var newOrder = GetOrder();
            var orderDetails = GetOrderDetails();

            var request = new OrderRequestModel(newOrder, orderDetails);

            shoppingCart.CartItems.Clear();
            await ShoppingCartStorage.SaveShoppingCartAsync(shoppingCart);

            await OrderEndpoint.InsertOrderAsync(request);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
