@page "/Cart"
@inject IShoppingCartStorage ShoppingCartStorage
@inject IUserEndpoint UserEndpoint
@inject ISessionStorageService SessionStorage
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Cart</PageTitle>

@if (string.IsNullOrWhiteSpace(errorMessage) is false)
{
    <MudAlert Severity="Severity.Error" Elevation="3">
        @errorMessage
    </MudAlert>
}

@if (isLoading is false)
{
    <MudGrid Class="mt-3">
        <MudItem xs="9">
            @if (shoppingCart?.CartItems?.Count <= 0)
            {
                <MudAlert Severity="Severity.Normal" Variant="Variant.Filled" Elevation="3">
                    <MudText>
                        It seems you do not have any items in your shopping cart list.
                    </MudText>
                    <MudText>
                        Please add items to your shopping cart list.
                    </MudText>
                </MudAlert>
            }
            else
            {
                <MudGrid>
                    <MudVirtualize Items="GetCombinedCartItems()" Context="c" OverscanCount="5">
                        <ShoppingCartItemTemplate @key="@c.Artifact.Id" CartItem="c"
                                                  RemoveEvent="() =>  RemoveFromCartAsync(c)" />
                    </MudVirtualize>
                </MudGrid>
            }
        </MudItem>
        <MudItem xs="3">
            <MudPaper Class="p-1">
                <MudGrid>
                    <MudItem xs="12">
                        <MudText Typo="Typo.h5" Class="fw-bold text-uppercase">
                            <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" /> Shopping Cart
                        </MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText Typo="Typo.body1" Class="fw-bold text-uppercase">
                            Information
                        </MudText>
                        <MudDivider />
                        <MudItem xs="12">
                            <MudText>You have a total of @totalItems items in your cart.</MudText>
                            <MudItem>
                                <MudText Color="Color.Default">The total price is: </MudText>
                                <MudText Color="Color.Error" Class="mt-1">@totalPrice &euro;</MudText>
                            </MudItem>
                        </MudItem>
                        <MudDivider Class="mt-3 mb-3" />
                        <MudItem xs="12">
                            <MudButton OnClick="CheckoutAsync" Variant="Variant.Filled" Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.ShoppingCartCheckout" Disabled="!CanCheckout()">
                                Check out
                            </MudButton>
                        </MudItem>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
}
else
{
    <LoadingTemplate />
}

@code {
    private UserModel loggedInUser = new();
    private ShoppingCartModel shoppingCart = new();

    private decimal totalPrice = 0;
    private int totalItems = 0;
    private string errorMessage = "";
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await AuthProvider.GetUserFromAuth(UserEndpoint);
        shoppingCart = await ShoppingCartStorage.GetShoppingCartAsync();
        CalculatePriceAndItems();

        isLoading = false;
    }

    private void CalculatePriceAndItems()
    {
        decimal price = 0;
        int itemCounts = 0;

        var uniqueArtifacts = new Dictionary<int, int>();

        foreach (var item in shoppingCart.CartItems)
        {
            if (uniqueArtifacts.ContainsKey(item.Artifact.Id) is false)
            {
                uniqueArtifacts[item.Artifact.Id] = 0;
            }

            uniqueArtifacts[item.Artifact.Id] += item.Quantity;
        }

        foreach (var kvp in uniqueArtifacts)
        {
            price += (decimal)shoppingCart.CartItems.First(i => i.Artifact.Id == kvp.Key).Artifact.Price * kvp.Value;
            itemCounts += kvp.Value;
        }

        totalPrice = price;
        totalItems = itemCounts;
    }

    private List<CartItemModel> GetCombinedCartItems()
    {
        var combinedCartItems = new List<CartItemModel>();

        foreach (var groupedItem in shoppingCart.CartItems.GroupBy(item => item.Artifact.Name))
        {
            var artifact = groupedItem.First().Artifact;
            var totalQuantity = groupedItem.Sum(item => item.Quantity);

            combinedCartItems.Add(new CartItemModel
                {
                    Artifact = artifact,
                    Quantity = totalQuantity
                });
        }

        return combinedCartItems;
    }

    private bool CanCheckout()
    {
        if (shoppingCart?.CartItems?.Count <= 0 || loggedInUser is null)
        {
            return false;
        }

        return true;
    }

    private async Task RemoveFromCartAsync(CartItemModel cartItem)
    {
        var item = shoppingCart.CartItems.FirstOrDefault(
            c => c.Artifact.Id == cartItem.Artifact.Id &&
            c.Quantity == cartItem.Quantity
        );

        shoppingCart.CartItems.Remove(item);
        await ShoppingCartStorage.SaveShoppingCartAsync(shoppingCart);
    }

    private async Task CheckoutAsync()
    {
        if (CanCheckout() is false)
        {
            return;
        }

        byte[] guidBytes = new byte[16];
        using (var rng = RandomNumberGenerator.Create())
        {
            rng.GetBytes(guidBytes);
        }

        var guid = new Guid(guidBytes);
        string stringifiedGuid = guid.ToString();

        await SessionStorage.SetItemAsStringAsync("CheckoutGuid", stringifiedGuid);

        Navigation.NavigateTo($"/Checkout/{stringifiedGuid}");
    }
}
