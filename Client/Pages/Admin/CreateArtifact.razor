@page "/Admin/Artifact/Create"
@inject IArtifactEndpoint ArtifactEndpoint
@inject ICategoryEndpoint CategoryEndpoint
@inject IEraEndpoint EraEndpoint
@inject IVendorEndpoint VendorEndpoint
@inject IUserEndpoint UserEndpoint
@inject IImageEndpoint ImageEndpoint
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@attribute [Authorize(Policy = "Admin")]

@if (isCreatingArtifact)
{
    <LoadingTemplate Object="Loading.ArtifactCreate"/>
}
else
{
    <div class="container">
        @if (string.IsNullOrWhiteSpace(errorMessage) is false)
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }
        <h1 class="text-center fw-bold">Create the artifact</h1>
        <div class="row">
            <div class="col-12 justify-content-center">
                <div class="row mb-4">
                    <div class="d-flex justify-content-end">
                        <button @onclick="ClosePage" class="btn btn-close"></button>
                    </div>
                    <div class="col-12">
                        <EditForm Model="artifact" OnValidSubmit="CreateArtifactAsync">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="row">
                                <div class="mt-2">
                                    <label class="form-label" for="artifact-name">Artifact Name</label>
                                    <div id="artifact-name">Enter the artifact's name.</div>
                                    <InputText @bind-Value="artifact.Name" class="form-control" />
                                </div>
                                <div class="mt-2">
                                    <label class="form-label" for="artifact-description">Artifact Description</label>
                                    <div id="artifact-name">Describe your artifact in 256 characters.</div>
                                    <InputTextArea @bind-Value="artifact.Description" class="form-control" />
                                </div>
                                <div class="mt-2">
                                    <label class="form-label" for="artifact-image">Artifact's image</label>
                                    <div id="artifact-image">Select an image of your artifact.</div>
                                    <InputFile OnChange="HandleImageSelected" accept="image/*" class="form-control" />
                                </div>
                                <div class="mt-2">
                                    <label class="form-label" for="artifact-quantity">Quantity</label>
                                    <div id="artifact-quantity">
                                        Please enter the quantity of artifacts you have available.
                                    </div>
                                    <InputNumber @bind-Value="artifact.Quantity" class="form-control" />
                                </div>
                                <div class="mt-2">
                                    <label class="form-label" for="artifact-price">Price</label>
                                    <div id="artifact-price">
                                        Please enter the price of the artifact in Euros.
                                    </div>
                                    <InputNumber @bind-Value="artifact.Price" class="form-control" />
                                </div>
                            </div>
                            <hr />
                            <div class="row mt-2">
                                <div class="col-6">
                                    <label class="form-label">Select a category.</label>
                                    <InputSelect @bind-Value="artifact.CategoryId"
                                                 class="form-select"
                                                 aria-label="Select the suited category for the artifact.">
                                        @if (categories is not null)
                                        {
                                            @foreach (var cat in categories)
                                            {
                                                <option @key="@cat.Id" value="@cat.Id">@cat.Name</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                                <div class="col-6">
                                    <label class="form-label">Select an era.</label>
                                    <InputSelect @bind-Value="artifact.EraId"
                                                 class="form-select"
                                                 aria-label="Select the correct era of the artifact.">
                                        @if (eras is not null)
                                        {
                                            @foreach (var e in eras)
                                            {
                                                <option @key="@e.Id" value="@e.Id">@e.Name</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="row mt-2">
                                <div class="col-12">
                                    <label class="form-label">Select the vendor you're portraying</label>
                                    <InputSelect @bind-Value="artifact.VendorId"
                                                 class="form-select"
                                                 aria-label="Select the vendor you're portraying.">
                                        @if (vendors is not null)
                                        {
                                            @foreach (var v in vendors)
                                            {
                                                <option @key="@v.Id" value="@v.Id">@v.Name</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                            <hr />
                            <div class="row mt-2">
                                <div class="form-check">
                                    <InputCheckbox @bind-Value="artifact.Availability"
                                                   class="form-check-input"
                                                   id="artifact-availability-check-box" />
                                    <label class="form-check-label" for="artifact-availability-check-box">
                                        Artifact is available
                                    </label>
                                </div>
                            </div>
                            <hr />
                            <div class="text-center">
                                <button type="submit"
                                        class="btn btn-primary text-uppercase">
                                    Create
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private const long MaxFileSize = 1024 * 1024 * 5; // represents 5MB

    private CreateArtifactModel artifact = new();
    private List<CategoryModel> categories;
    private List<EraModel> eras;
    private List<VendorModel> vendors;

    private IBrowserFile selectedImageFile;
    private string errorMessage = "";
    private bool isCreatingArtifact = false;

    protected override async Task OnInitializedAsync()
    {
        vendors = await VendorEndpoint.GetAllVendorsAsync();
        categories = await CategoryEndpoint.GetAllCategoriesAsync();
        eras = await EraEndpoint.GetAllErasAsync();

        artifact.CategoryId = categories.FirstOrDefault().Id;
        artifact.EraId = eras.FirstOrDefault().Id;
        artifact.VendorId = vendors.FirstOrDefault().Id;
    }

    private void ClosePage()
    {
        Navigation.NavigateTo("/");
    }

    private void HandleImageSelected(InputFileChangeEventArgs e)
    {
        selectedImageFile = e.File;
    }

    private bool IsArtifactInvalid(ArtifactModel artifact)
    {
        var selectedEra = eras.Where(e => e.Id == artifact.EraId).FirstOrDefault();
        var selectedCategory = categories.Where(c => c.Id == artifact.CategoryId).FirstOrDefault();

        if (selectedEra is null || selectedCategory is null)
        {
            errorMessage = "The era you've provided is currently unavailable.";
            return true;
        }

        if (selectedCategory is null)
        {
            errorMessage = "The category you've provided is currently unavailable.";
            return true;
        }

        if (selectedImageFile?.Size > MaxFileSize)
        {
            errorMessage = "Your image is above 5MB.";
            selectedImageFile = null;
            return true;
        }

        return false;
    }

    private async Task CreateArtifactAsync()
    {
        errorMessage = "";
        var newArtifact = new ArtifactModel
        {
            Name = artifact.Name,
            Description = artifact.Description,
            Quantity = artifact.Quantity,
            Price = artifact.Price,
            CategoryId = artifact.CategoryId,
            VendorId = artifact.VendorId,
            ImageId = "",
            EraId = artifact.EraId,
            Availability = artifact.Availability,
        };

        if (IsArtifactInvalid(newArtifact))
        {
            return;
        }

        isCreatingArtifact = true;
        if (selectedImageFile is not null)
        {
            string objectId = await ImageEndpoint.UploadImageAsync(selectedImageFile);
            newArtifact.ImageId = objectId;
        }

        await ArtifactEndpoint.InsertArtifactAsync(newArtifact);

        artifact = new();
        isCreatingArtifact = false;
        ClosePage();
    }
}
