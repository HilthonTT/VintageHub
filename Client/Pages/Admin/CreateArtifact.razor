@page "/Admin/Artifact/Create"
@inject IArtifactEndpoint ArtifactEndpoint
@inject ICategoryEndpoint CategoryEndpoint
@inject IEraEndpoint EraEndpoint
@inject IVendorEndpoint VendorEndpoint
@inject IUserEndpoint UserEndpoint
@inject IImageEndpoint ImageEndpoint
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@attribute [Authorize(Policy = "Admin")]

<PageTitle>Create An Artifact</PageTitle>

@if (isCreatingArtifact is false && viewPreview is false)
{
    <MudGrid Class="mt-3 mb-5">
        @if (string.IsNullOrWhiteSpace(errorMessage) is false)
        {
            <MudAlert Severity="Severity.Error" Elevation="3">
                @errorMessage
            </MudAlert>
        }
        <MudItem xs="12">
            <EditForm Model="artifact" OnValidSubmit="CreateArtifactAsync">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="12">
                        <MudCard>
                            <MudCardMedia Image="@((string.IsNullOrWhiteSpace(imageSource) ? "https://dummyimage.com/600x400/000/fff" : imageSource))"
                                          Height="200" />
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6" Class="fw-bold text-uppercase">
                                        Create An Artifact
                                    </MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudButton StartIcon="@Icons.Material.Filled.Preview" Color="Color.Info" OnClick="LoadPreview">
                                        Load Preview
                                    </MudButton>
                                    <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="ClosePage" />
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudGrid>
                                    <MudItem xs="12">
                                        <MudTextField @bind-Value="artifact.Name" Label="Artifact Name"
                                                      Required="true" Variant="Variant.Outlined" Clearable="true"
                                                      HelperText="Enter the artifact's name." />
                                        <MudText Color="Color.Error">
                                            <ValidationMessage For="() => artifact.Name" />
                                        </MudText>
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudTextField @bind-Value="artifact.Description" Label="Artifact Description"
                                                      Lines="2" Required="true" Variant="Variant.Outlined" Clearable="true"
                                                      HelperText="Describe your artifact in 1000 characters." />
                                        <MudText Color="Color.Error">
                                            <ValidationMessage For="() => artifact.Description" />
                                        </MudText>
                                    </MudItem>

                                    <MudItem xs="6">
                                        <MudNumericField @bind-Value="artifact.Quantity" Label="Quantity" Required="true"
                                                         Variant="Variant.Outlined" Clearable="true"
                                                         HelperText="Please enter the quantity of artifacts you have available." />
                                        <MudText Color="Color.Error">
                                            <ValidationMessage For="() => artifact.Quantity" />
                                        </MudText>
                                    </MudItem>

                                    <MudItem xs="6">
                                        <MudNumericField @bind-Value="artifact.Price" Label="Price" Required="true"
                                                         Variant="Variant.Outlined" Clearable="true"
                                                         HelperText="Please enter the price of the artifact in Euros." />
                                        <MudText Color="Color.Error">
                                            <ValidationMessage For="() => artifact.Price" />
                                        </MudText>
                                    </MudItem>

                                    <MudItem xs="12">
                                        <MudNumericField @bind-Value="artifact.DiscountAmount" Label="Discount Amount" Required="true"
                                                         Variant="Variant.Outlined" Clearable="true"
                                                         HelperText="Please enter the amount that you want to deduct current artifact price in euros." />
                                        <MudText Color="Color.Error">
                                            <ValidationMessage For="() => artifact.DiscountAmount" />
                                        </MudText>
                                    </MudItem>

                                    <MudItem xs="6">
                                        <MudSelect @bind-Value="artifact.CategoryId" Variant="Variant.Outlined"
                                                   Label="Select the suited category for the artifact.">
                                            @if (categories is not null)
                                            {
                                                <MudVirtualize Items="categories" Context="c" OverscanCount="10">
                                                    <MudSelectItem @key="@c.Id" Value="@c.Id">@c.Name</MudSelectItem>
                                                </MudVirtualize>
                                            }
                                        </MudSelect>
                                        <MudText Color="Color.Error">
                                            <ValidationMessage For="() => artifact.CategoryId" />
                                        </MudText>
                                    </MudItem>

                                    <MudItem xs="6">
                                        <MudSelect @bind-Value="artifact.EraId" Variant="Variant.Outlined"
                                                   Label="Select the correct era of the artifact.">
                                            @if (eras is not null)
                                            {
                                                <MudVirtualize Items="eras" Context="e" OverscanCount="10">
                                                    <MudSelectItem @key="@e.Id" Value="@e.Id">@e.Name</MudSelectItem>
                                                </MudVirtualize>
                                            }
                                        </MudSelect>
                                        <MudText Color="Color.Error">
                                            <ValidationMessage For="() => artifact.EraId" />
                                        </MudText>
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudAutocomplete Label="Artifact Owner"
                                                         HelperText="Select the vendor you're portraying."
                                                         SearchFunc="SearchVendorsAsync"
                                                         ValueChanged="(e) => artifact.VendorId = e.Id" T="VendorDisplayModel"
                                                         ToStringFunc="@(e => e==null?null : $"{e.Name} - {e.Id}")"
                                                         Variant="Variant.Outlined">
                                            <NoItemsTemplate>
                                                <MudText>No vendors with such name</MudText>
                                            </NoItemsTemplate>
                                        </MudAutocomplete>
                                        <MudText Color="Color.Error">
                                            <ValidationMessage For="() => artifact.VendorId" />
                                        </MudText>
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                            <MudCardActions>
                                <MudFileUpload T="IBrowserFile" FilesChanged="HandleImageSelected" Context="file_context">
                                    <ButtonTemplate>
                                        <MudFab HtmlTag="label"
                                                Color="Color.Secondary"
                                                StartIcon="@Icons.Material.Filled.Image"
                                                Label="Load picture"
                                                for="@file_context" />
                                    </ButtonTemplate>
                                </MudFileUpload>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                                           Color="Color.Primary" Class="ml-auto" Size="Size.Large">
                                    Make Artifact
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudItem>
    </MudGrid>
}
else if (viewPreview && isCreatingArtifact is false)
{
    <MudGrid Justify="Justify.Center" Class="mt-3 mb-5">
        <MudItem xs="12">
            <MudGrid Justify="Justify.Center">
                <MudItem xs="12">
                    <div class="d-flex justify-content-between">
                        <MudText Typo="Typo.h5">This is a preview on how your artifact will look like in the store.</MudText>
                        <MudButton Color="Color.Info" StartIcon="@Icons.Material.Filled.Close" OnClick="() => viewPreview = false">
                            Close Preview
                        </MudButton>
                    </div>
                </MudItem>
                <MudItem xs="12">
                    <MudDivider Class="mt-3 mb-3" />
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="4">
            <MudCard Class="m-2">
                <MudCardMedia Image="@((string.IsNullOrWhiteSpace(imageSource) ? "https://dummyimage.com/600x400/000/fff" : imageSource))"
                              Height="200" alt="@artifact?.Name" />
                <MudCardContent>
                    <MudText Typo="Typo.h5">@artifact?.Name</MudText>
                    <MudText Typo="Typo.body2">@artifact?.Description</MudText>
                    <MudDivider Class="mt-3 mb-3" />
                    <MudText Typo="Typo.body2">This artifact is sold by: @selectedVendor?.Name</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Error"
                               StartIcon="@Icons.Material.Filled.AddShoppingCart">
                        Add to Cart
                    </MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Details">
                        Learn More
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
}
else
{
    <LoadingTemplate />
}

@code {
    private const long MaxFileSize = 1024 * 1024 * 5; // represents 5MB

    private CreateArtifactModel artifact = new();
    private List<CategoryModel> categories;
    private List<EraModel> eras;
    private List<VendorDisplayModel> vendors;
    private VendorDisplayModel selectedVendor;

    private IBrowserFile selectedImageFile;
    private string errorMessage = "";
    private string imageSource = "";
    private bool isCreatingArtifact = false;
    private bool viewPreview = false;

    protected override async Task OnInitializedAsync()
    {
        vendors = await VendorEndpoint.GetAllVendorsAsync();
        categories = await CategoryEndpoint.GetAllCategoriesAsync();
        eras = await EraEndpoint.GetAllErasAsync();

        artifact.CategoryId = categories.FirstOrDefault().Id;
        artifact.EraId = eras.FirstOrDefault().Id;
        artifact.VendorId = vendors.FirstOrDefault().Id;
    }

    private async Task<IEnumerable<VendorDisplayModel>> SearchVendorsAsync(string value)
    {
        var vendors = await VendorEndpoint.GetAllVendorsAsync();

        return vendors.Where(v => v.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void ClosePage()
    {
        Navigation.NavigateTo("/");
    }

    private void LoadPreview()
    {
        viewPreview = true;
        selectedVendor = vendors.FirstOrDefault(v => v.Id == artifact.VendorId);
    }

    private async Task LoadImageSourceAsync()
    {
        if (selectedImageFile is null)
        {
            return;
        }

        using var stream = selectedImageFile.OpenReadStream(selectedImageFile.Size);
        using var memoryStream = new MemoryStream();

        await stream.CopyToAsync(memoryStream);
        byte[] bytes = memoryStream.ToArray();

        imageSource = $"data:{selectedImageFile.ContentType};base64,{Convert.ToBase64String(bytes)}";
    }

    private async Task HandleImageSelected(IBrowserFile e)
    {
        selectedImageFile = e;

        await LoadImageSourceAsync();
    }

    private bool IsArtifactInvalid(ArtifactModel artifact)
    {
        var selectedEra = eras.Where(e => e.Id == artifact.EraId).FirstOrDefault();
        var selectedCategory = categories.Where(c => c.Id == artifact.CategoryId).FirstOrDefault();

        if (selectedEra is null || selectedCategory is null)
        {
            errorMessage = "The era you've provided is currently unavailable.";
            return true;
        }

        if (selectedCategory is null)
        {
            errorMessage = "The category you've provided is currently unavailable.";
            return true;
        }

        if (selectedImageFile?.Size > MaxFileSize)
        {
            errorMessage = "Your image is above 5MB.";
            selectedImageFile = null;
            return true;
        }

        return false;
    }

    private async Task CreateArtifactAsync()
    {
        errorMessage = "";
        var newArtifact = new ArtifactModel
            {
                Name = artifact.Name,
                Description = artifact.Description,
                Quantity = artifact.Quantity,
                Price = artifact.Price,
                DiscountAmount = artifact.DiscountAmount,
                CategoryId = artifact.CategoryId,
                VendorId = artifact.VendorId,
                ImageId = "",
                EraId = artifact.EraId,
                Availability = artifact.Availability,
            };

        if (IsArtifactInvalid(newArtifact))
        {
            return;
        }

        isCreatingArtifact = true;
        if (selectedImageFile is not null)
        {
            string objectId = await ImageEndpoint.UploadImageAsync(selectedImageFile);
            newArtifact.ImageId = objectId;
        }

        await ArtifactEndpoint.InsertArtifactAsync(newArtifact);

        artifact = new();
        isCreatingArtifact = false;
        ClosePage();
    }
}
