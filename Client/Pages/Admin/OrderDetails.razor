@page "/Admin/OrderDetails/{Id:int}"
@inject IOrderEndpoint OrderEndpoint
@inject IUserEndpoint UserEndpoint
@inject IArtifactEndpoint ArtifactEndpoint
@inject NavigationManager Navigation
@attribute [Authorize(Policy = "Admin")]

<PageTitle>Order Details</PageTitle>

@if (isLoading is false)
{
    <MudGrid Class="mt-3 mb-5">
        <MudItem xs="12">
            <div class="d-flex justify-content-between">
                <MudText Typo="Typo.h6" Class="fw-bold text-uppercase">
                    Order Details of order Id @order?.Id
                </MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="ClosePage"/>
            </div>
        </MudItem>
        <MudDivider Class="mb-3"/>
        <MudItem xs="12">
            @if (orderDetails is not null)
            {
                <MudDataGrid T="OrderDetailsDataModel" Items="orderDetails" ReadOnly="false" EditMode="DataGridEditMode.Form"
                             StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
                             Bordered="true" Striped="true" EditTrigger="DataGridEditTrigger.Manual"
                             Filterable="true" QuickFilter="quickFilter" Hover="true" Hideable="true" SortMode="SortMode.Multiple">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Order Details</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchText" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
                    </ToolBarContent>
                    <Columns>
                        <SelectColumn T="OrderDetailsDataModel"/>
                        <PropertyColumn Property="x => x.Id" Title="Id" Sortable="false" Filterable="false" IsEditable="false" />
                        <PropertyColumn Property="x => x.Artifact.Name" Title="Artifact Name" IsEditable="false"/>
                        <PropertyColumn Property="x => x.TotalPrice" Title="Total Price &euro;" IsEditable="false"/>
                        <PropertyColumn Property="x => x.Quantity" Title="Total Quantity" IsEditable="true"/>
                        <TemplateColumn CellClass="d-flex justify-end">
                            <CellTemplate>
                                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit"
                                               OnClick="@context.Actions.StartEditingItemAsync" />
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            }
            <MudExpansionPanels Style="flex:1" Class="mt-5">
                <MudExpansionPanel Text="Show Events">
                    @foreach (string message in events)
                    {
                        <MudText Typo="@Typo.body2">@message</MudText>
                    }
                    @if (events.Count > 0)
                    {
                        <div class="d-flex">
                            <MudSpacer />
                            <MudButton Class="mt-3" ButtonType="ButtonType.Button"
                                       Variant="Variant.Filled" OnClick="@(() => events.Clear())">
                                Clear
                            </MudButton>
                        </div>
                    }
                </MudExpansionPanel>
            </MudExpansionPanels>
        </MudItem>
    </MudGrid>
}
else
{
    <LoadingTemplate />
}

@code {
    [Parameter]
    public int Id { get; set; }

    private UpdateOrderModel updatedOrder = new();
    private OrderModel order;
    private List<OrderDetailsDataModel> orderDetails;
    private List<string> events = new();

    private string searchText = "";
    private decimal totalPrice = 0;
    private int totalItems = 0;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        order = await OrderEndpoint.GetOrderByIdAsync(Id);
        updatedOrder = new(order);

        await LoadOrderDetailsAsync();
        await CalculatePriceAndItems();

        isLoading = false;
    }

    private async Task LoadOrderDetailsAsync()
    {
        var orderDetailsList = await OrderEndpoint.GetOrderDetailsByOrderIdAsync(Id);
        var list = new List<OrderDetailsDataModel>();

        foreach (var o in orderDetailsList)
        {
            var data = new OrderDetailsDataModel(o);
            data.Artifact = await ArtifactEndpoint.GetArtifactByIdAsync(o.ArtifactId);
            data.TotalPrice = (decimal)o.Quantity * data.Artifact.Price;

            list.Add(data);
        }

        orderDetails = list.ToList();
    }

    private void ClosePage()
    {
        Navigation.NavigateTo("/Admin/OrderListing");
    }

    private async Task CalculatePriceAndItems()
    {
        decimal price = 0;
        int itemCounts = 0;

        var uniqueArtifacts = new Dictionary<int, int>();

        foreach (var item in orderDetails)
        {
            if (uniqueArtifacts.ContainsKey(item.Artifact.Id) is false)
            {
                uniqueArtifacts[item.Artifact.Id] = 0;
            }

            uniqueArtifacts[item.Artifact.Id] += item.Quantity;
        }

        foreach (var kvp in uniqueArtifacts)
        {
            var artifact = await ArtifactEndpoint.GetArtifactByIdAsync(kvp.Key);
            price += (decimal)artifact.Price * kvp.Value;
            itemCounts += kvp.Value;
        }

        totalPrice = price;
        totalItems = itemCounts;
    }

    private List<OrderDetailsModel> GetOrderDetailsList()
    {
        var list = new List<OrderDetailsModel>();

        foreach (var item in orderDetails)
        {
            var details = new OrderDetailsModel
            {
                Id = item.Id,
                ArtifactId = item.ArtifactId,
                OrderId = item.OrderId,
                Quantity = item.Quantity
            };

            list.Add(details);
        }

        return list;
    }

    private void StartedEditingItem(OrderDetailsDataModel item)
    {
        events.Insert(0, $"Event = StartedEditingItem, Data = {JsonSerializer.Serialize(item)}");
    }

    private void CanceledEditingItem(OrderDetailsDataModel item)
    {
        events.Insert(0, $"Event = CanceledEditingItem, Data = {JsonSerializer.Serialize(item)}");
    }

    private async Task CommittedItemChanges(OrderDetailsDataModel item)
    {
        events.Insert(0, $"Event = CommittedItemChanges, Data = {JsonSerializer.Serialize(item)}");

        var orderDetails = GetOrderDetailsList();
        var details = orderDetails.FirstOrDefault(x => x.Id == item.Id);
        orderDetails.Remove(details);

        details.Quantity = item.Quantity;
        orderDetails.Add(details);

        var request = new OrderRequestModel(order, orderDetails);

        await OrderEndpoint.UpdateOrderAsync(request);
    }

    private Func<OrderDetailsDataModel, bool> quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            return true;
        }

        if (x.Artifact.Name.Contains(searchText, StringComparison.InvariantCultureIgnoreCase))
        {
            return true;
        }

        return false;
    };
}
