@page "/Admin/Vendor/Create"
@inject IStringLocalizer<Resource> Localizer
@inject IVendorEndpoint VendorEndpoint
@inject IUserEndpoint UserEndpoint
@inject IImageEndpoint ImageEndpoint
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@attribute [Authorize(Policy = "Admin")]

<PageTitle>@Localizer["create-vendor"]</PageTitle>

@if (isCreatingVendor is false)
{
    <MudGrid Class="mt-3 mb-5">
        @if (string.IsNullOrWhiteSpace(errorMessage) is false)
        {
            <MudAlert Severity="Severity.Error" Elevation="3">
                @errorMessage
            </MudAlert>
        }
        <MudItem xs="12">
            <EditForm Model="vendor" OnValidSubmit="CreateVendorAsync">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="12">
                        <MudCard>
                            <MudCardMedia Image="@((string.IsNullOrWhiteSpace(imageSource) ? "https://dummyimage.com/600x400/000/fff" : imageSource))"
                                          Height="200" />
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6" Class="fw-bold text-uppercase">
                                        @Localizer["create-vendor"]
                                    </MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="ClosePage" />
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudGrid>
                                    <MudItem xs="12">
                                        <MudTextField @bind-Value="vendor.Name" Label=@Localizer["vendor-name"]
                                                      Required="true" Variant="Variant.Outlined" Clearable="true"
                                                      HelperText=@Localizer["vendor-name-description"] />
                                        <MudText Color="Color.Error">
                                            <ValidationMessage For="() => vendor.Name" />
                                        </MudText>
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudTextField @bind-Value="vendor.Description" Label=@Localizer["vendor-description"]
                                                      Lines="2" Required="true" Clearable="true" Variant="Variant.Outlined"
                                                      HelperText=@Localizer["vendor-description-description"] />
                                        <MudText Color="Color.Error">
                                            <ValidationMessage For="() => vendor.Description" />
                                        </MudText>
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudDatePicker @bind-Date="vendor.DateFounded" Label=@Localizer["vendor-date-founded"] 
                                                       Required="true"
                                                       Clearable="true" Variant="Variant.Outlined"
                                                       HelperText=@Localizer["vendor-date-founded-description"] />
                                        <MudText Color="Color.Error">
                                            <ValidationMessage For="() => vendor.DateFounded" />
                                        </MudText>
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudAutocomplete Label=@Localizer["vendor-owner"] 
                                                         HelperText=@Localizer["vendor-owner-description"]
                                                         SearchFunc="SearchUserAsync" T="UserModel"
                                                         ValueChanged="(u) => vendor.OwnerUserId = u.Id"
                                                         ToStringFunc="@(u => u==null?null : $"{u.FirstName} {u.LastName} - {u.Id}")"
                                                         Variant="Variant.Outlined">
                                            <NoItemsTemplate>
                                                <MudText>
                                                    @Localizer["no-user-found"]
                                                </MudText>
                                            </NoItemsTemplate>
                                        </MudAutocomplete>
                                        <MudText Color="Color.Error">
                                            <ValidationMessage For="() => vendor.OwnerUserId" />
                                        </MudText>
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                            <MudCardActions>
                                <MudFileUpload T="IBrowserFile" FilesChanged="HandleImageSelected" Context="file_context">
                                    <ButtonTemplate>
                                        <MudFab HtmlTag="label"
                                                Color="Color.Secondary"
                                                StartIcon="@Icons.Material.Filled.Image"
                                                Label="Load picture"
                                                for="@file_context" />
                                    </ButtonTemplate>
                                </MudFileUpload>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                                           Color="Color.Primary" Class="ml-auto" Size="Size.Large">
                                    @Localizer["make-vendor"]
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudItem>
    </MudGrid>
}
else
{
    <LoadingTemplate />
}


@code {
    private const long MaxFileSize = 1024 * 1024 * 5; // represents 5MB

    private CreateVendorModel vendor = new();
    private List<UserModel> users;
    private IBrowserFile selectedImageFile;
    private string errorMessage = "";
    private string imageSource = "";
    private bool isCreatingVendor = false;

    protected override async Task OnInitializedAsync()
    {
        users = await UserEndpoint.GetAllUsersAsync();
    }

    private async Task<IEnumerable<UserModel>> SearchUserAsync(string value)
    {
        var users = await UserEndpoint.GetAllUsersAsync();

        return users.Where(u => u.FirstName.Contains(value, StringComparison.InvariantCultureIgnoreCase) ||
            u.LastName.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void ClosePage()
    {
        Navigation.NavigateTo("/");
    }

    private async Task LoadImageSourceAsync()
    {
        if (selectedImageFile is null)
        {
            return;
        }

        using var stream = selectedImageFile.OpenReadStream(selectedImageFile.Size);
        using var memoryStream = new MemoryStream();

        await stream.CopyToAsync(memoryStream);
        byte[] bytes = memoryStream.ToArray();

        imageSource = $"data:{selectedImageFile.ContentType};base64,{Convert.ToBase64String(bytes)}";
    }

    private async Task HandleImageSelected(IBrowserFile e)
    {
        selectedImageFile = e;

        await LoadImageSourceAsync();
    }

    private bool IsVendorInvalid(VendorModel vendor)
    {
        var selectedUser = users.Where(u => u.Id == vendor.OwnerUserId).FirstOrDefault();

        if (selectedUser is null)
        {
            errorMessage = "The user you've provided is currently unavailable.";
            return true;
        }

        if (selectedImageFile?.Size > MaxFileSize)
        {
            errorMessage = "Your image is above 5MB.";
            selectedImageFile = null;
            return true;
        }

        return false;
    }

    private async Task FilterUsersAsync(string searchInput)
    {
        var output = await UserEndpoint.GetAllUsersAsync();

        if (string.IsNullOrWhiteSpace(searchInput) is false)
        {
            output = output.Where(
                u => u.FirstName.Contains(searchInput, StringComparison.InvariantCultureIgnoreCase) || 
                u.LastName.Contains(searchInput, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        users = output;
    }

    private async Task CreateVendorAsync()
    {
        errorMessage = "";

        var newVendor = new VendorModel
        {
            OwnerUserId = vendor.OwnerUserId,
            Name = vendor.Name,
            ImageId = "",
            Description = vendor.Description,
            DateFounded = vendor.DateFounded.GetValueOrDefault(),
        };

        var selectedUser = users.Where(u => u.Id == newVendor.OwnerUserId).FirstOrDefault();

        if (IsVendorInvalid(newVendor))
        {
            return;
        }

        isCreatingVendor = true;
        if (selectedImageFile is not null)
        {
            string objectId = await ImageEndpoint.UploadImageAsync(selectedImageFile);
            newVendor.ImageId = objectId;
        }

        await VendorEndpoint.InsertVendorAsync(newVendor);

        vendor = new();
        isCreatingVendor = false;
        ClosePage();
    }
}
