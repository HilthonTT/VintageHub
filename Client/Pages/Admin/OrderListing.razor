@page "/Admin/OrderListing"
@inject IOrderEndpoint OrderEndpoint
@inject IUserEndpoint UserEndpoint
@inject ISessionStorageService SessionStorage
@inject NavigationManager Navigation
@attribute [Authorize(Policy = "Admin")]

<PageTitle>Order Listing</PageTitle>

@if (isLoading is false)
{
    <MudGrid Class="mt-3 mb-5">
        <MudItem xs="12">
            <div class="d-flex justify-content-between">
                <MudText Typo="Typo.h6" Class="fw-bold text-uppercase">
                    Order Listing
                </MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="ClosePage"/>
            </div>
            
        </MudItem>
        <MudDivider Class=" mb-3" />
        <MudItem xs="12">
            @if (orders is not null)
            {
                <MudDataGrid Items="orders" Filterable="true" SortMode="SortMode.Multiple"
                             Hideable="true" Bordered="true" Hover="true" Striped="true" QuickFilter="quickFilter">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Orders</MudText>
                        <MudSpacer />
                        <MudNumericField @bind-Value="userId" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Min="0" />
                    </ToolBarContent>
                    <Columns>
                        <SelectColumn T="OrderModel" />
                        <PropertyColumn Property="x => x.Id" Title="Id" Sortable="false" Filterable="false" />
                        <PropertyColumn Property="x => x.UserId" Title="User Id" />
                        <PropertyColumn Property="x => x.TotalPrice" Title="Total Price &euro;" />
                        <PropertyColumn Property="x => x.DateOrdered" Title="Date Ordered" />
                        <PropertyColumn Property="x => x.IsComplete" Title="Completed" />
                        <PropertyColumn Property="x => x.IsCanceled" Title="Canceled" />
                        <TemplateColumn>
                            <CellTemplate>
                                <MudStack Row="true">
                                    <MudButton OnClick="() => LoadOrderDetailsPage(context.Item)" Size="Size.Small"
                                               Variant="Variant.Filled" Color="Color.Primary">
                                        Open Order
                                    </MudButton>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="OrderModel" />
                    </PagerContent>
                </MudDataGrid>
            }
        </MudItem>
    </MudGrid>
}
else
{
    <LoadingTemplate />
}

@code {
    private List<OrderModel> orders;
    private UserModel selectedUser;
    private bool sortByPrice = false;
    private bool isLoading = true;
    private int userId = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadFilterStateAsync();
        await FilterOrdersAsync();

        isLoading = false;
    }

    private void ClosePage()
    {
        Navigation.NavigateTo("/");
    }

    private void LoadOrderDetailsPage(OrderModel order)
    {
        Navigation.NavigateTo($"/Admin/OrderDetails/{order.Id}");
    }

    private async Task LoadFilterStateAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParameters = HttpUtility.ParseQueryString(uri.Query);

        selectedUser = queryParameters["userId"] is not null
            ? selectedUser = await UserEndpoint.GetUserByIdAsync(int.Parse(queryParameters["userId"]))
            : selectedUser = await SessionStorage.GetItemAsync<UserModel>(nameof(selectedUser)) ?? null;

        sortByPrice = queryParameters["sortByPrice"] is not null
            ? sortByPrice = bool.Parse(queryParameters["sortByPrice"])
            : sortByPrice = await SessionStorage.GetItemAsync<bool>(nameof(sortByPrice));
    }

    private async Task SaveFilterStateAsync()
    {
        await SessionStorage.SetItemAsync(nameof(selectedUser), selectedUser);
        await SessionStorage.SetItemAsync(nameof(sortByPrice), sortByPrice);
    }

    private async Task FilterOrdersAsync()
    {
        var output = await OrderEndpoint.GetAllOrdersAsync();
        output = output.Where(o => o.IsCanceled is false).ToList();

        if (selectedUser is not null)
        {
            output = output.Where(o => o.UserId == selectedUser.Id).ToList();
        }

        output = sortByPrice
            ? output.OrderByDescending(o => o.TotalPrice).ThenByDescending(o => o.DateOrdered).ToList()
            : output.OrderByDescending(o => o.DateOrdered).ThenByDescending(o => o.TotalPrice).ToList();

        orders = output;
        await SaveFilterStateAsync();
    }

    private async Task OnUserClickAsync(UserModel user = null)
    {
        selectedUser = user;
        await FilterOrdersAsync();
    }

    private async Task OnSelectChange(string value)
    {
        value = value.ToLower();

        switch (value)
        {
            case "price":
                sortByPrice = true;
                break;
            case "date-ordered":
                sortByPrice = false;
                break;
            default:
                break;
        }

        await FilterOrdersAsync();
    }

    private string GetSelectedUser(UserModel user = null)
    {
        if (user?.Id == selectedUser?.Id)
        {
            return "text-success";
        }

        return "";
    }

    private Func<OrderModel, bool> quickFilter => x =>
    {
        if (userId <= 0)
        {
            return true;
        }

        if (x.UserId == userId)
        {
            return true;
        }

        return false;
    };
}
