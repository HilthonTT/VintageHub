@page "/Vendor/{Id:int}"
@inject IStringLocalizer<Resource> Localizer
@inject IVendorEndpoint VendorEndpoint
@inject IArtifactEndpoint ArtifactEndpoint
@inject ICategoryEndpoint CategoryEndpoint
@inject IEraEndpoint EraEndpoint
@inject IImageEndpoint ImageEndpoint
@inject ISessionStorageService SessionStorage
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>@vendor?.Name</PageTitle>

@if (isLoading is false)
{
    <MudGrid Class="mb-4">
        <MudItem xs="3">
            <MudItem xs="12">
                <MudText Typo="Typo.h6">@Localizer["categories"]</MudText>
                <MudDivider Class="mt-3 mb-3" />
            </MudItem>
            <MudItem xs="12">
                <MudButton OnClick="() => OnCategoryClickAsync(null)" Color="@GetSelectedCategory()" Class="mt-1 mb-1">
                    @Localizer["all"]
                </MudButton>
                @if (categories is not null)
                {
                    <MudVirtualize Items="categories" Context="c" OverscanCount="10">
                        <MudItem xs="12">
                            <MudButton @key="@c.Id" Class="mt-1 mb-1" Color="@GetSelectedCategory(c)"
                                       OnClick="() => OnCategoryClickAsync(c)">
                                @c.Name
                            </MudButton>
                        </MudItem>
                    </MudVirtualize>
                }
                <MudButton OnClick="() => ToggleShowAllCategoriesAsync(!showAllCategories)" Color="Color.Secondary"
                           Size="Size.Small">
                    @((showAllCategories ? Localizer["see-less"] : Localizer["see-more"]))
                </MudButton>
            </MudItem>
            <MudItem xs="12">
                <MudText Typo="Typo.h6">@Localizer["eras"]</MudText>
                <MudDivider Class="mt-3 mb-3" />
                <MudItem xs="12">
                    <MudButton OnClick="() => OnEraClickAsync(null)" Color="@GetSelectedEraClass()" Class="mt-1 mb-1">
                        @Localizer["all"]
                    </MudButton>
                </MudItem>
                @if (eras is not null)
                {
                    <MudVirtualize Items="eras" Context="e" OverscanCount="10">
                        <MudItem xs="12">
                            <MudButton @key="@e.Id" Class="mt-1 mb-1" Color="@GetSelectedEraClass(e)"
                                       OnClick="() => OnEraClickAsync(e)">
                                @e.Name
                            </MudButton>
                        </MudItem>
                    </MudVirtualize>
                }
                <MudButton OnClick="() => ToggleShowAllErasAsync(!showAllEras)" Color="Color.Secondary"
                           Size="Size.Small">
                    @((showAllEras ? @Localizer["see-less"] : @Localizer["see-more"]))
                </MudButton>
            </MudItem>
            <MudItem xs="12">
                <MudText Typo="Typo.h6">@Localizer["rating"]</MudText>
                <MudDivider Class="mt-3 mb-3" />
                <MudVirtualize Items="ratings" Context="r" OverscanCount="10">
                    <MudItem xs="12" @onclick="() => OnRatingClickAsync(r)">
                        <MudRating SelectedValue="@GetRatingValue(r)" Color="@GetSelectedRating(r)" ReadOnly="true" />
                    </MudItem>
                </MudVirtualize>
            </MudItem>
        </MudItem>
        <MudItem xs="9">
            <MudItem xs="12">
                <div class="d-flex justify-content-end">
                    <button @onclick="ClosePage" class="btn btn-close btn-close-white"></button>
                </div>
                <MudItem>
                    <MudImage Src="@((string.IsNullOrWhiteSpace(imageSource) ? "https://dummyimage.com/1100x250/000/fff" : imageSource))"
                              Fluid="true" Alt="@vendor?.Name" />
                </MudItem>
                <MudDivider Class="mt-3 mb-3" />
                <MudItem>
                    <MudText Typo="Typo.h5" Class="fw-bold text-uppercase">
                        @vendor?.Name
                    </MudText>
                    <MudText Typo="Typo.subtitle1">
                        @vendor?.Description
                    </MudText>
                    <MudDivider Class="mt-3 mb-3" />
                    <MudText Typo="Typo.subtitle2">
                        @Localizer["founded-on"] @vendor?.DateFounded
                    </MudText>
                </MudItem>
            </MudItem>
            <MudItem xs="12" Class="mt-5">
                <MudGrid>
                    <MudItem xs="10">
                        <MudText>@artifacts?.Count @Localizer["results"]</MudText>
                    </MudItem>
                    <MudItem xs="2">
                        <MudSelect T="string" ValueChanged="((e) => OnSelectChange(e))"
                                   Label="@Localizer["ordering"]" AnchorOrigin="Origin.BottomCenter">
                            <MudSelectItem Value="@("rating")">@Localizer["rating"]</MudSelectItem>
                            <MudSelectItem Value="@("price")">@Localizer["price"];</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudItem>
            <MudItem xs="12">
                <MudAutocomplete T="string" Label=@Localizer["search"]
                                 SearchFunc="SearchArtifactsAsync" ResetValueOnEmptyText="true"
                                 ValueChanged="OnSearchInputAsync" />
            </MudItem>
            <MudDivider Class="mb-3 mt-3" />
            <MudItem xs="12">
                <div class="d-flex justify-content-end">
                    <MudButton OnClick="LoadListingPage"
                               Variant="Variant.Filled" Color="Color.Primary">
                        @Localizer["see-more"]
                    </MudButton>
                </div>
                <MudGrid>
                    @if (artifacts is not null)
                    {
                        <MudVirtualize Items="artifacts" Context="a">
                            <ArtifactTemplate @key="a.Id" Artifact="a" />
                        </MudVirtualize>
                    }
                </MudGrid>
            </MudItem>
        </MudItem>
    </MudGrid>
}
else
{
    <LoadingTemplate />
}

@code {
    [Parameter]
    public int Id { get; set; }

    private VendorDisplayModel vendor;
    private List<ArtifactDisplayModel> artifacts;
    private List<CategoryModel> categories;
    private List<EraModel> eras;
    private CategoryModel selectedCategory;
    private EraModel selectedEra;
    private Rating selectedRating = Rating.ZeroStar;
    private string imageSource = "";
    private string searchText = "";
    private bool sortByPrice = false;
    private bool showAllCategories = false;
    private bool showAllEras = false;
    private bool isLoading = true;

    private List<Rating> ratings = new()
    {
        Rating.ZeroStar,
        Rating.OneStar,
        Rating.TwoStar,
        Rating.ThreeStar,
        Rating.FourStar,
        Rating.FiveStar,
    };

    protected override async Task OnInitializedAsync()
    {
        vendor = await VendorEndpoint.GetVendorByIdAsync(Id);
        if (vendor is not null)
        {
            imageSource = ImageEndpoint.GetImage(vendor.ImageId);
        }

        await LoadFilterStateAsync();
        await FilterArtifactsAsync();

        await LoadCategoriesAsync();
        await LoadErasAsync();

        isLoading = false;
    }

    private async Task LoadCategoriesAsync()
    {
        var allCategories = await CategoryEndpoint.GetAllCategoriesAsync();
        categories = showAllCategories ? allCategories : allCategories.Take(5).ToList();
    }

    private async Task LoadErasAsync()
    {
        var allEras = await EraEndpoint.GetAllErasAsync();
        eras = showAllEras ? allEras : allEras.Take(5).ToList();
    }

    private async Task<IEnumerable<string>> SearchArtifactsAsync(string value)
    {
        searchText = value;
        var output = await ArtifactEndpoint.GetArtifactByVendorIdAsync(Id);

        return output.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)).Select(x => x.Name);
    }


    private async Task LoadFilterStateAsync()
    {
        searchText = await SessionStorage.GetItemAsStringAsync(nameof(searchText)) ?? "";
        selectedRating = await SessionStorage.GetItemAsync<Rating>(nameof(selectedRating));

        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParameters = HttpUtility.ParseQueryString(uri.Query);

        if (queryParameters["eraId"] is not null)
        {
            int eraId = int.Parse(queryParameters["eraId"]);
            selectedEra = await EraEndpoint.GetEraByIdAsync(eraId);
        }
        else
        {
            selectedEra = await SessionStorage.GetItemAsync<EraModel>(nameof(selectedEra)) ?? null;
        }

        if (queryParameters["categoryId"] is not null)
        {
            int categoryId = int.Parse(queryParameters["categoryId"]);
            selectedCategory = await CategoryEndpoint.GetCategoryByIdAsync(categoryId);
        }
        else
        {
            selectedCategory = await SessionStorage.GetItemAsync<CategoryModel>(nameof(selectedCategory)) ?? null;
        }
    }

    private async Task SaveFilterStateAsync()
    {
        await SessionStorage.SetItemAsStringAsync(nameof(searchText), searchText);
        await SessionStorage.SetItemAsync<EraModel>(nameof(selectedEra), selectedEra);
        await SessionStorage.SetItemAsync<CategoryModel>(nameof(selectedCategory), selectedCategory);
        await SessionStorage.SetItemAsync<Rating>(nameof(selectedRating), selectedRating);
    }

    private async Task FilterArtifactsAsync()
    {
        var output = await ArtifactEndpoint.GetArtifactByVendorIdAsync(Id);

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(a => a.Name.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        if (selectedEra is not null)
        {
            output = output.Where(a => a.Era.Id == selectedEra.Id).ToList();
        }

        if (selectedCategory is not null)
        {
            output = output.Where(a => a.Category.Id == selectedCategory.Id).ToList();
        }

        output = selectedRating switch
        {
            Rating.ZeroStar => output.Where(a => a.Rating >= 0).ToList(),
            Rating.OneStar => output.Where(a => a.Rating >= 1).ToList(),
            Rating.TwoStar => output.Where(a => a.Rating >= 2).ToList(),
            Rating.ThreeStar => output.Where(a => a.Rating >= 3).ToList(),
            Rating.FourStar => output.Where(a => a.Rating >= 4).ToList(),
            Rating.FiveStar => output.Where(a => a.Rating >= 5).ToList(),
            _ => output
        };

        output = sortByPrice
            ? output.OrderByDescending(a => a.Price).ThenByDescending(a => a.Rating).ToList()
            : output.OrderByDescending(a => a.Rating).ThenByDescending(a => a.Price).ToList();

        artifacts = output;
        await SaveFilterStateAsync();
    }

    private async Task OnSearchInputAsync(string searchInput)
    {
        searchText = searchInput;

        if (string.IsNullOrWhiteSpace(searchInput))
        {
            searchText = "";
        }

        await FilterArtifactsAsync();
    }

    private async Task OnEraClickAsync(EraModel era)
    {
        selectedEra = era;
        await FilterArtifactsAsync();
    }

    private async Task OnCategoryClickAsync(CategoryModel category)
    {
        selectedCategory = category;
        await FilterArtifactsAsync();
    }

    private async Task OnSelectChange(string value)
    {
        value = value.ToLower();

        sortByPrice = value switch
        {
            "price" => true,
            "rating" => false,
            _ => false,
        };

        await FilterArtifactsAsync();
    }

    private async Task OnRatingClickAsync(Rating rating)
    {
        selectedRating = rating;
        await FilterArtifactsAsync();
    }

    private async Task ToggleShowAllCategoriesAsync(bool showAll)
    {
        showAllCategories = showAll;
        await LoadCategoriesAsync();
    }

    private async Task ToggleShowAllErasAsync(bool showAll)
    {
        showAllEras = showAll;
        await LoadErasAsync();
    }

    private void ClosePage()
    {
        Navigation.NavigateTo("/");
    }

    private void LoadListingPage()
    {
        Navigation.NavigateTo("/Listing");
    }

    private Color GetSelectedEraClass(EraModel era = null)
    {
        if (selectedEra?.Id == era?.Id)
        {
            return Color.Success;
        }

        return Color.Default;
    }

    private Color GetSelectedCategory(CategoryModel category = null)
    {
        if (selectedCategory?.Id == category?.Id)
        {
            return Color.Success;
        }

        return Color.Default;
    }

    private int GetRatingValue(Rating rating)
    {
        return rating switch
        {
            Rating.ZeroStar => 0,
            Rating.OneStar => 1,
            Rating.TwoStar => 2,
            Rating.ThreeStar => 3,
            Rating.FourStar => 4,
            Rating.FiveStar => 5,
            _ => 0,
        };
    }

    private Color GetSelectedRating(Rating rating)
    {
        if (selectedRating == rating)
        {
            return Color.Success;
        }

        return Color.Default;
    }
}
