@page "/Artifact/{Id:int}"
@inject IUserEndpoint UserEndpoint
@inject IArtifactEndpoint ArtifactEndpoint
@inject ICategoryEndpoint CategoryEndpoint
@inject IImageEndpoint ImageEndpoint
@inject IEraEndpoint EraEndpoint
@inject IVendorEndpoint VendorEndpoint
@inject IReviewEndpoint ReviewEndpoint
@inject IShoppingCartStorage ShoppingCartStorage
@inject IWishlistEndpoint WishlistEndpoint
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>@artifact?.Name</PageTitle>

@if (isLoading is false)
{
    <MudGrid Class="mb-3 mt-5">
        <MudItem xs="9">
            @if (string.IsNullOrWhiteSpace(errorMessage) is false)
            {
                <MudAlert Severity="Severity.Error" Class="mb-3">
                    @errorMessage
                </MudAlert>
            }
            <MudGrid>
                <MudItem xs="12">
                    <MudCard Elevation="5">
                        <MudCardHeader>
                            <MudItem xs="12">
                                <div class="d-flex justify-content-between">
                                    <div class="d-flex">
                                        <MudAvatar>
                                            <MudImage Src="@(string.IsNullOrWhiteSpace(vendorImageSource)? "https://dummyimage.com/600x400/000/fff": vendorImageSource)"
                                                      Alt="@artifact?.Vendor?.Name" />
                                        </MudAvatar>
                                        <MudText Typo="Typo.body1" Class="fw-bold text-uppercase">
                                            Vendor:
                                            <MudButton OnClick="LoadVendorPage" StartIcon="@Icons.Material.Filled.BrandingWatermark" Color="Color.Primary">
                                                @artifact?.Vendor?.Name
                                            </MudButton>
                                        </MudText>
                                    </div>
                                    <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="ClosePage" />
                                </div>
                            </MudItem>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid Justify="Justify.Center">
                                <MudItem xs="12" Class="text-center">
                                    <MudImage Src="@(string.IsNullOrWhiteSpace(artifactImageSource) ? "https://dummyimage.com/600x400/000/fff": artifactImageSource)"
                                              Alt="@artifact?.Name" Width="500" Height="500" />
                                </MudItem>
                                @if (artifact is not null)
                                {
                                    <MudItem xs="12">
                                        <MudText Typo="Typo.h5">@artifact?.Name</MudText>
                                        <MudDivider Class="mt-3 mb-3" />
                                        <MudText Typo="Typo.body1">@artifact?.Description</MudText>
                                        <MudText Typo="Typo.subtitle1">Quantity: @artifact?.Quantity</MudText>
                                        <MudText Typo="Typo.subtitle1">Total Price: @artifact?.FinalPrice.ToString("0.####") &euro;</MudText>
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudItem>
                                            <div class="d-flex justify-content-end">
                                                <MudButton OnClick="AddToWishlistAsync" StartIcon="@Icons.Material.Filled.List"
                                                           Color="Color.Secondary" Disabled="!canAddToWishlist">
                                                    Add To Wishlist
                                                </MudButton>
                                            </div>
                                        </MudItem>
                                        <div class="d-flex justify-content-between">
                                            <MudRating SelectedValue="(int)artifact?.Rating" ReadOnly="true" />
                                            <MudStack Row>
                                             <MudNumericField @bind-Value="selectedQuantity" Label="Quantity" Min="0" Max="(int)artifact?.Quantity" />
                                             <MudButton OnClick="AddToCartAsync" StartIcon="@Icons.Material.Filled.AddShoppingCart"
                                                        Color="Color.Error" Disabled="!canAddToCart">
                                                 Add To Cart
                                             </MudButton>
                                         </MudStack>
                                     </div>
                                 </MudItem>
                                }
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Elevation="3" Class="p-2">
                        <MudItem xs="12">
                            <div class="d-flex justify-content-between">
                                <MudText Typo="Typo.h5" Class="text-start text-uppercase fw-bold">Reviews [@reviews?.Count]</MudText>
                                <MudButton OnClick="LoadReviewPage" StartIcon="@Icons.Material.Filled.Create" Color="Color.Warning">
                                    Make A Review
                                </MudButton>
                            </div>
                            <MudDivider />
                        </MudItem>
                        <MudItem xs="12" Class="mt-3">
                            @if (reviews is not null && artifact is not null)
                            {
                                <MudVirtualize Items="reviews" Context="r" OverscanCount="10">
                                    <ReviewTemplate @key="r.Id" Review="r" Artifact="artifact" />
                                </MudVirtualize>
                            }
                        </MudItem>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="3">
            <div class="d-flex justify-content-between">
                <MudText Typo="Typo.h6">Artifacts</MudText>
                <MudButton OnClick="LoadAllArtifactsPage" StartIcon="@Icons.Material.Filled.More">
                    See More
                </MudButton>
            </div>
            <MudDivider Class="mt-3 mb-3" />
            @if (randomArtifacts is not null)
            {
                <MudVirtualize Items="randomArtifacts" Context="a" OverscanCount="10">
                    <ArtifactDetailsTemplate @key="a.Id" Artifact="a" />
                </MudVirtualize>
            }
        </MudItem>
    </MudGrid>
}
else
{
    <LoadingTemplate />
}


@code {
    [Parameter]
    public int Id { get; set; }

    private const int ImageSize = 500;

    private int selectedQuantity = 1;
    private string artifactImageSource = "";
    private string vendorImageSource = "";
    private string errorMessage = "";
    private bool isLoading = true;
    private bool canAddToCart = false;
    private bool canAddToWishlist = false;
    private List<ArtifactDisplayModel> randomArtifacts;
    private List<ReviewModel> reviews;
    private ArtifactDisplayModel artifact;
    private UserModel loggedInUser;
    private ShoppingCartModel shoppingCart;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loggedInUser = await AuthProvider.GetUserFromAuth(UserEndpoint);
            shoppingCart = await ShoppingCartStorage.GetShoppingCartAsync();

            await LoadArtifactAsync();
            await LoadRandomArtifactsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }

        isLoading = false;
    }

    private async Task LoadArtifactAsync()
    {
        artifact = await ArtifactEndpoint.GetArtifactByIdAsync(Id);

        if (artifact is not null)
        {
            artifact.Quantity = GetArtifactQuantity(artifact);
            canAddToCart = CanAddToCart(artifact);
            artifactImageSource = ImageEndpoint.GetImage(artifact.ImageId);
            vendorImageSource = ImageEndpoint.GetImage(artifact.Vendor.ImageId);

            canAddToWishlist = await CanAddToWishlistAsync();
            reviews = await ReviewEndpoint.GetAllReviewsByArtifactId(artifact.Id);
        }
    }

    private async Task LoadRandomArtifactsAsync()
    {
        var random = new Random();

        var artifacts = await ArtifactEndpoint.GetAllArtifactsAsync();
        randomArtifacts = artifacts.OrderBy(x => random.Next()).Take(25).ToList();
    }

    private void LoadReviewPage()
    {
        if (artifact is null)
        {
            return;
        }

        Navigation.NavigateTo($"/Artifact/{artifact?.Id}/Review");
    }

    private void ClosePage()
    {
        Navigation.NavigateTo("/");
    }

    private void LoadAllArtifactsPage()
    {
        Navigation.NavigateTo("/Listing");
    }

    private void LoadCartPage()
    {
        Navigation.NavigateTo("/Cart");
    }

    private void LoadWishlistPage()
    {
        Navigation.NavigateTo("/Wishlist");
    }

    private void LoadVendorPage()
    {
        if (artifact.Vendor is null)
        {
            return;
        }

        Navigation.NavigateTo($"/Vendor/{artifact.Vendor.Id}");
    }

    private bool CanAddToCart(ArtifactDisplayModel artifact)
    {
        var item = shoppingCart.CartItems.FirstOrDefault(x => x.Artifact.Id == artifact.Id);

        if (item is not null || artifact.Quantity <= 0)
        {
            return false;
        }

        return true;
    }

    private int GetArtifactQuantity(ArtifactDisplayModel artifact)
    {
        if (shoppingCart is null)
        {
            return artifact.Quantity;
        }

        int itemCount = shoppingCart.CartItems.Where(x => x.Artifact.Id == artifact.Id).Count();

        artifact.Quantity -= itemCount;

        if (artifact.Quantity < 0)
        {
            artifact.Quantity = 0;
        }

        return artifact.Quantity;
    }

    private async Task<bool> CanAddToWishlistAsync()
    {
        if (artifact is null || loggedInUser is null)
        {
            return false;
        }

        var wishlists = await WishlistEndpoint.GetAllWishlistsAsync(loggedInUser.Id);
        var w = wishlists.FirstOrDefault(w => w.ArtifactId == artifact.Id);

        if (w is not null)
        {
            return false;
        }

        return true;
    }

    private async Task AddToWishlistAsync()
    {
        if (canAddToWishlist is false)
        {
            return;
        }

        canAddToWishlist = true;
        var newWishlist = new WishlistModel
        {
            ArtifactId = artifact.Id,
            UserId = loggedInUser.Id,
        };

        await WishlistEndpoint.InsertWishlistAsync(newWishlist);

        LoadWishlistPage();
    }

    private async Task AddToCartAsync()
    {
        if (loggedInUser is null)
        {
            Navigation.NavigateToLogin("authentication/login");
        }

        if (canAddToCart is false)
        {
            return;
        }

        artifact.Quantity -= selectedQuantity;

        var newCartItem = new CartItemModel
            {
                Artifact = artifact,
                Quantity = selectedQuantity,
            };

        shoppingCart.CartItems.Add(newCartItem);

        await ShoppingCartStorage.SaveShoppingCartAsync(shoppingCart);

        LoadCartPage();
    }
}
