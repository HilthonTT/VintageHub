@page "/Artifact/{Id:int}"
@inject IUserEndpoint UserEndpoint
@inject IArtifactEndpoint ArtifactEndpoint
@inject ICategoryEndpoint CategoryEndpoint
@inject IImageEndpoint ImageEndpoint
@inject IEraEndpoint EraEndpoint
@inject IVendorEndpoint VendorEndpoint
@inject IReviewEndpoint ReviewEndpoint
@inject IShoppingCartStorage ShoppingCartStorage
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation

<div class="container">
    <div class="row">
        <div class="col-12">
            <div class="row">
                <div class="col-8">
                    <div>
                        <div>
                            @if (string.IsNullOrWhiteSpace(artifactImageSource) is false)
                            {
                                <img src="@artifactImageSource"
                                     class="img-thumbnail rounded"
                                     alt="@artifact?.Name"
                                     width="@ImageSize"
                                     height="@ImageSize" />
                            }
                            else
                            {
                                <img src="https://dummyimage.com/600x400/000/fff"
                                     class="img-thumbnail rounded"
                                     alt="Placeholder text"
                                     width="@ImageSize"
                                     height="@ImageSize" />
                            }
                        </div>
                        <div>
                            <h2>@artifact?.Name</h2>
                        </div>
                        <hr />
                        <div class="row">
                            <p>@artifact?.Description</p>
                        </div>
                        <hr />
                        <div class="row">
                            <p>@artifact?.Price &euro;</p>
                        </div>
                        <hr />
                        <div class="row">
                            <p>Quantity available: @artifact?.Quantity</p>
                        </div>
                        <hr />
                        <div class="row">
                            <div class="d-flex justify-content-between">
                                <p>Vendor: @vendor?.Name</p>
                                <div class="d-flex align-items-center">
                                    <InputNumber @bind-Value="selectedQuantity" class="form-control" style="flex: 1;" />
                                    <button @onclick="AddToCart" class="btn btn-success mx-1">
                                        Add To Cart
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-2">
                            <hr />
                            <div class="d-flex justify-content-between">
                                <h4 class="fw-bold text-uppercase">Reviews - @reviews?.Count</h4>
                                <button @onclick="LoadReviewPage" class="btn btn-primary">
                                    Make A Review
                                </button>
                            </div>
                            @if (reviews is not null)
                            {
                                <Virtualize Items="reviews" Context="r" OverscanCount="10">
                                    <div @key="r.Id">
                                        <div>
                                            @r.Title
                                        </div>
                                        <div>
                                            @r.Description
                                        </div>
                                        <div>
                                            Rating: @r.Rating
                                        </div>
                                    </div>
                                </Virtualize>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-4 text-end">
                    <div class="text-end">
                        <button @onclick="LoadAllArtifactsPage" class="btn btn-outline-primary">
                            See More
                        </button>
                    </div>
                    @if (randomArtifacts is not null)
                    {
                        <Virtualize Items="randomArtifacts" Context="a" OverscanCount="10">
                            <div @key="a.Id">
                                @a.Name
                            </div>
                        </Virtualize>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private const int ImageSize = 500;

    private int selectedQuantity = 1;
    private string artifactImageSource = "";
    private string vendorImageSource = "";
    private List<ArtifactModel> randomArtifacts;
    private List<ReviewModel> reviews;
    private VendorModel vendor;
    private ArtifactModel artifact;
    private UserModel loggedInUser;
    private CategoryModel category;
    private EraModel era;

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await AuthProvider.GetUserFromAuth(UserEndpoint);

        await LoadArtifactAsync();
        await LoadRandomArtifactsAsync();
    }

    private async Task LoadArtifactAsync()
    {
        artifact = await ArtifactEndpoint.GetArtifactByIdAsync(Id);

        if (artifact is not null)
        {
            artifactImageSource = await ImageEndpoint.GetImageAsync(artifact.ImageId) ?? "";

            category = await CategoryEndpoint.GetCategoryByIdAsync(artifact.CategoryId);
            era = await EraEndpoint.GetEraByIdAsync(artifact.EraId);
            reviews = await ReviewEndpoint.GetAllReviewsByArtifactId(artifact.Id);

            await LoadVendorAsync();
        }
    }

    private async Task LoadVendorAsync()
    {
        vendor = await VendorEndpoint.GetVendorByIdAsync(artifact.VendorId);

        vendorImageSource = await ImageEndpoint.GetImageAsync(vendor.ImageId) ?? "";
    }

    private async Task LoadRandomArtifactsAsync()
    {
        var random = new Random();

        var artifacts = await ArtifactEndpoint.GetAllArtifactsAsync();
        randomArtifacts = artifacts.OrderBy(x => random.Next()).Take(25).ToList();
    }

    private void LoadReviewPage()
    {
        if (artifact is null)
        {
            return;
        }

        Navigation.NavigateTo($"/Artifact/{artifact?.Id}/Review");
    }

    private void ClosePage()
    {
        Navigation.NavigateTo("/");
    }

    private void LoadAllArtifactsPage()
    {
        Navigation.NavigateTo("Listing");
    }

    private void LoadCartPage()
    {
        Navigation.NavigateTo("/Cart");
    }

    private async Task AddToCart()
    {
        if (loggedInUser is null)
        {
            Navigation.NavigateToLogin("authentication/login");
        }

        artifact.Quantity -= selectedQuantity;

        var newCartItem = new CartItemModel
        {
            Artifact = artifact,
            Quantity = selectedQuantity,
        };

        var shoppingCart = await ShoppingCartStorage.GetShoppingCartAsync();
        shoppingCart.CartItems.Add(newCartItem);

        await ShoppingCartStorage.SaveShoppingCartAsync(shoppingCart);

        LoadCartPage();
    }
}
