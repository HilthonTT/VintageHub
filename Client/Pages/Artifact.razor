@page "/Artifact/{Id:int}"
@inject IUserEndpoint UserEndpoint
@inject IArtifactEndpoint ArtifactEndpoint
@inject ICategoryEndpoint CategoryEndpoint
@inject IImageEndpoint ImageEndpoint
@inject IEraEndpoint EraEndpoint
@inject IVendorEndpoint VendorEndpoint
@inject IReviewEndpoint ReviewEndpoint
@inject IShoppingCartStorage ShoppingCartStorage
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@attribute [Authorize]


<PageTitle>@artifact?.Name</PageTitle>

@if (isLoading is false)
{
    <MudGrid>
        <MudItem xs="9">
            <MudGrid>
                <MudItem xs="12">
                    <MudCard Elevation="5">
                        <MudCardHeader>
                            <MudItem xs="12">
                                <div class="d-flex justify-content-between">
                                    <div class="d-flex">
                                        <MudAvatar>
                                            <MudImage Src="@(string.IsNullOrWhiteSpace(vendorImageSource)? "https://dummyimage.com/600x400/000/fff": vendorImageSource)"
                                                      Alt="@vendor?.Name" />
                                        </MudAvatar>
                                        <MudText Typo="Typo.body1" Class="fw-bold text-uppercase">
                                            Vendor:
                                            <MudButton OnClick="LoadVendorPage" StartIcon="@Icons.Material.Filled.BrandingWatermark" Color="Color.Primary">
                                                @vendor?.Name
                                            </MudButton>
                                        </MudText>
                                    </div>
                                    <button @onclick="ClosePage" class="btn btn-close btn-close-white"></button>
                                </div>
                            </MudItem>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid Justify="Justify.Center">
                                <MudItem xs="12" Class="text-center">
                                    <MudImage Src="@(string.IsNullOrWhiteSpace(artifactImageSource) ? "https://dummyimage.com/600x400/000/fff": artifactImageSource)"
                                              Alt="@artifact?.Name" />
                                </MudItem>
                                @if (artifact is not null)
                                {
                                    <MudItem xs="12">
                                        <MudText Typo="Typo.h5">@artifact?.Name</MudText>
                                        <MudDivider Class="mt-3 mb-3" />
                                        <MudText Typo="Typo.body1">@artifact?.Description</MudText>
                                        <MudText Typo="Typo.subtitle1">Quantity: @artifact?.Quantity</MudText>
                                    </MudItem>
                                    <MudItem xs="12">
                                        <div class="d-flex justify-content-between">
                                            <MudRating SelectedValue="(int)artifact?.Rating" />
                                            <div class="d-flex">
                                                <MudNumericField @bind-Value="selectedQuantity" Label="Quantity" Min="0" Max="(int)artifact?.Quantity" />
                                                <MudButton OnClick="AddToCart" StartIcon="@Icons.Material.Filled.AddShoppingCart"
                                                           Color="Color.Error">
                                                    Add To Cart
                                                </MudButton>
                                            </div>
                                        </div>
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Elevation="3" Class="p-2">
                        <MudItem xs="12">
                            <div class="d-flex justify-content-between">
                                <MudText Typo="Typo.h5" Class="text-start text-uppercase fw-bold">Reviews [@reviews?.Count]</MudText>
                                <MudButton OnClick="LoadReviewPage" StartIcon="@Icons.Material.Filled.Create" Color="Color.Warning">
                                    Make A Review
                                </MudButton>
                            </div>
                            <MudDivider />
                        </MudItem>
                        <MudItem xs="12" Class="mt-3">

                            @if (reviews is not null)
                            {
                                <MudVirtualize Items="reviews" Context="r" OverscanCount="10">
                                    <ReviewTemplate @key="r.Id" Review="r" />
                                </MudVirtualize>
                            }
                        </MudItem>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="3">
            <div class="d-flex justify-content-between">
                <MudText Typo="Typo.h6">Artifacts</MudText>
                <MudButton OnClick="LoadAllArtifactsPage" StartIcon="@Icons.Material.Filled.More">
                    See More
                </MudButton>
            </div>
            <MudDivider Class="mt-3 mb-3" />
            @if (randomArtifacts is not null)
            {
                <MudVirtualize Items="randomArtifacts" Context="a" OverscanCount="10">
                    <ArtifactDetailsTemplate @key="a.Id" Artifact="a" />
                </MudVirtualize>
            }
        </MudItem>
    </MudGrid>
}
else
{
    <MudGrid Justify="Justify.Center" Class="centered-layout">
        <MudItem Class="centered-layout" xs="12">
            <div class="spinner-border centered-layout" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </MudItem>
    </MudGrid>
}


@code {
    [Parameter]
    public int Id { get; set; }

    private const int ImageSize = 500;

    private int selectedQuantity = 1;
    private string artifactImageSource = "";
    private string vendorImageSource = "";
    private string errorMessage = "";
    private bool isLoading = true;
    private List<ArtifactModel> randomArtifacts;
    private List<ReviewModel> reviews;
    private VendorModel vendor;
    private ArtifactModel artifact;
    private UserModel loggedInUser;
    private CategoryModel category;
    private EraModel era;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loggedInUser = await AuthProvider.GetUserFromAuth(UserEndpoint);

            await LoadArtifactAsync();
            await LoadRandomArtifactsAsync();

            isLoading = false;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task LoadArtifactAsync()
    {
        artifact = await ArtifactEndpoint.GetArtifactByIdAsync(Id);

        if (artifact is not null)
        {
            artifactImageSource = await ImageEndpoint.GetImageAsync(artifact.ImageId) ?? "";

            category = await CategoryEndpoint.GetCategoryByIdAsync(artifact.CategoryId);
            era = await EraEndpoint.GetEraByIdAsync(artifact.EraId);
            reviews = await ReviewEndpoint.GetAllReviewsByArtifactId(artifact.Id);

            await LoadVendorAsync();
        }
    }

    private async Task LoadVendorAsync()
    {
        vendor = await VendorEndpoint.GetVendorByIdAsync(artifact.VendorId);

        vendorImageSource = await ImageEndpoint.GetImageAsync(vendor.ImageId) ?? "";
    }

    private async Task LoadRandomArtifactsAsync()
    {
        var random = new Random();

        var artifacts = await ArtifactEndpoint.GetAllArtifactsAsync();
        randomArtifacts = artifacts.OrderBy(x => random.Next()).Take(25).ToList();
    }

    private void LoadReviewPage()
    {
        if (artifact is null)
        {
            return;
        }

        Navigation.NavigateTo($"/Artifact/{artifact?.Id}/Review");
    }

    private void ClosePage()
    {
        Navigation.NavigateTo("/");
    }

    private void LoadAllArtifactsPage()
    {
        Navigation.NavigateTo("Listing");
    }

    private void LoadCartPage()
    {
        Navigation.NavigateTo("/Cart");
    }

    private void LoadVendorPage()
    {
        if (vendor is null)
        {
            return;
        }

        Navigation.NavigateTo($"/Vendor/{vendor.Id}");
    }

    private async Task AddToCart()
    {
        if (loggedInUser is null)
        {
            Navigation.NavigateToLogin("authentication/login");
        }

        artifact.Quantity -= selectedQuantity;

        var newCartItem = new CartItemModel
        {
            Artifact = artifact,
            Quantity = selectedQuantity,
        };

        var shoppingCart = await ShoppingCartStorage.GetShoppingCartAsync();
        shoppingCart.CartItems.Add(newCartItem);

        await ShoppingCartStorage.SaveShoppingCartAsync(shoppingCart);

        LoadCartPage();
    }
}
