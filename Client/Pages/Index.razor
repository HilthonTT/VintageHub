@page "/"
@inject IArtifactEndpoint ArtifactEndpoint
@inject ICategoryEndpoint CategoryEndpoint
@inject IEraEndpoint EraEndpoint
@inject IUserDataVerifier UserVerifier
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Home</PageTitle>

@if (string.IsNullOrWhiteSpace(errorMessage) is false)
{
    <MudAlert Severity="Severity.Error" Class="mb-2" Elevation="5" Variant="Variant.Outlined">
        @errorMessage
    </MudAlert>
}

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" Class="text-center">
        <MudAvatar Size="Size.Large" Style="height:150px; width:150px; font-size:2rem;">
            <MudImage Src="images/hat-cowboy-solid.svg" Alt="Vintage Hub" Fluid="true" />
        </MudAvatar>
        <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Vintage Hub</MudText>
    </MudItem>
</MudGrid>

<MudGrid Class="mt-8" Spacing="5">
    <MudItem xs="12">
        <div class="d-flex justify-content-between">
            <MudText Typo="Typo.h4" GutterBottom="true" Class="fw-bold text-uppercase">Artifacts</MudText>
            <div>
                <MudButton OnClick="LoadListingPage" StartIcon="@Icons.Material.Filled.More">See More</MudButton>
                @if (artifacts is null)
                {
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
            </div>
        </div>
        <MudGrid>
            @if (artifacts is not null)
            {
                <MudVirtualize Items="artifacts?.Take(5).ToList()" Context="a">
                    <ArtifactTemplate @key="a.Id" Artifact="a"/>
                </MudVirtualize>
            }
        </MudGrid>
    </MudItem>

    <MudDivider />
    <MudItem xs="12">
        <div class="d-flex justify-content-between">
            <MudText Typo="Typo.h4" GutterBottom="true" Class="fw-bold text-uppercase">Categories</MudText>
            @if (categories is null)
            {
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
        </div>
        <MudGrid>
            @if (categories is not null)
            {
                <MudVirtualize Items="categories" Context="c" OverscanCount="10">
                    <CategoryTemplate @key="c.Id" Category="c"/>
                </MudVirtualize>
            }
        </MudGrid>
    </MudItem>

    <MudDivider />
    <MudItem xs="12">
        <div class="d-flex justify-content-between">
            <MudText Typo="Typo.h4" GutterBottom="true" Class="fw-bold text-uppercase">Eras</MudText>
            @if (eras is null)
            {
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
        </div>
        <MudGrid>
            @if (eras is not null)
            {
                <MudVirtualize Items="eras" Context="e" OverscanCount="10">
                    <EraTemplate @key="e.Id" Era="e"/>
                </MudVirtualize>
            }
        </MudGrid>
    </MudItem>
</MudGrid>

@code {
    private UserModel loggedInUser;
    private List<ArtifactModel> artifacts;
    private List<CategoryModel> categories;
    private List<EraModel> eras;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            artifacts = await ArtifactEndpoint.GetAllArtifactsAsync();
            categories = await CategoryEndpoint.GetAllCategoriesAsync();
            eras = await EraEndpoint.GetAllErasAsync();
            loggedInUser = await UserVerifier.LoadAndVerifyUserAsync();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void LoadListingPage()
    {
        Navigation.NavigateTo("/Listing");
    }
}