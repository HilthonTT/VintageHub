@page "/CustomerServices/Sell-On-Vintage-Hub/Professsional-Account"
@inject IUserEndpoint UserEndpoint
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Professional Account</PageTitle>

<MudGrid Class="mt-3 mb-5">
    <MudItem xs="12">
        <MudText Typo="Typo.body2">
            Customer Service
            <MudIcon Icon="@Icons.Material.Filled.ArrowRight" />
            Send A Professional Account request
        </MudText>
    </MudItem>
    <MudItem xs="12">
        @if (string.IsNullOrWhiteSpace(message) is false)
        {
            <MudAlert Severity="Severity.Error" Elevation="3" Class="mb-3">
                @message
            </MudAlert>
        }
        <EditForm Model="email" OnValidSubmit="OnSendEmail">
            <DataAnnotationsValidator />
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12">
                           <div class="d-flex justify-content-between">
                               <div>
                                    <MudText Typo="Typo.h6" Class="fw-bold text-uppercase">
                                        Send A Professional Account request
                                    </MudText>   
                               </div>
                               <MudIconButton OnClick="ClosePage" Icon="@Icons.Material.Filled.Close" />
                           </div>
                            <MudDivider Class="mt-3 mb-3" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudItem>
                                <MudTextField @bind-Value="email.Message" Label="Message" Required="true"
                                              Variant="Variant.Outlined" Clearable="true" HelperText="Please provide us your message."/>
                                <MudText Color="Color.Error">
                                    <ValidationMessage For="() => email.Message" />
                                </MudText>
                            </MudItem>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                               Color="Color.Primary" Class="ml-auto" Size="Size.Large">
                        Send Email
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </MudItem>
    <MudItem xs="12">
        <MudExpansionPanels Style="flex:1" Class="mt-5">
            <MudExpansionPanel Text="Show Events">
                @foreach (string message in events)
                {
                    <MudText Typo="@Typo.body2" Class="text-break">
                        @message
                    </MudText>
                }
                @if (events.Count > 0)
                {
                    <div class="d-flex">
                        <MudSpacer />
                        <MudButton Class="mt-3" ButtonType="ButtonType.Button"
                                   Variant="Variant.Filled" OnClick="@(() => events.Clear())">
                            Clear
                        </MudButton>
                    </div>
                }
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudItem>
</MudGrid>

@code {
    private SendEmailRequestModel email = new();
    private List<string> events = new();
    private UserModel loggedInUser;
    private string message = "";

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await AuthProvider.GetUserFromAuth(UserEndpoint);
        email.Sender = loggedInUser;
    }

    private void ClosePage()
    {
        Navigation.NavigateTo("/");
    }

    // Simulate sending email
    private void OnSendEmail()
    {
        string stringifiedEmail = JsonSerializer.Serialize(email);
        events.Add(stringifiedEmail);

        email = new();
        message = "Email Successfully Sent!";
    }
}
