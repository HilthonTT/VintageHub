@page "/Listing"
@inject IArtifactEndpoint ArtifactEndpoint
@inject IEraEndpoint EraEndpoint
@inject ICategoryEndpoint CategoryEndpoint
@inject ISessionStorageService SessionStorage
@inject NavigationManager Navigation

<div class="container mb-5">
    <div class="row">
        <div class="col-12">
            <div class="row">
                <div class="d-flex justify-content-end">
                    <button class="btn btn-close" @onclick="ClosePage"></button>
                </div>
                <div class="col-2">
                    <div class="row">
                        <div class="fw-bold">Categories</div>
                        <hr />
                        <div @onclick="() => OnCategoryClickAsync(null)">
                            <label class="@GetSelectedCategory()">All</label>
                        </div>
                        @if (categories is not null)
                        {
                            <Virtualize Items="categories" Context="c" OverscanCount="10">
                                <div @key="@c.Id" @onclick="() => OnCategoryClickAsync(c)">
                                    <label class="@GetSelectedCategory(c)">@c.Name</label>
                                </div>
                            </Virtualize>
                        }
                        <div>
                            @if (showAllCategories)
                            {
                                <button @onclick="() => ToggleShowAllCategoriesAsync(false)" class="btn btn-primary">
                                    See Less
                                </button>
                            }
                            else
                            {
                                <button @onclick="() => ToggleShowAllCategoriesAsync(true)" class="btn btn-primary">
                                    See More
                                </button>
                            }
                        </div>
                    </div>
                    <div class="row mt-2">
                        <label class="fw-bold">Eras</label>
                        <hr />
                        <div @onclick="() => OnEraClickAsync(null)">
                            <label class="@GetSelectedEraClass()">All</label>
                        </div>
                        @if (eras is not null)
                        {
                            <Virtualize Items="eras" Context="e" OverscanCount="10">
                                <div @key="@e.Id" @onclick="() => OnEraClickAsync(e)">
                                    <label class="@GetSelectedEraClass(e)">@e.Name</label>
                                </div>
                            </Virtualize>
                        }
                        <div>
                            @if (showAllEras)
                            {
                                <button @onclick="() => ToggleShowAllErasAsync(false)" class="btn btn-primary">
                                    See Less
                                </button>
                            }
                            else
                            {
                                <button @onclick="() => ToggleShowAllErasAsync(true)" class="btn btn-primary">
                                    See More
                                </button>
                            }
                        </div>
                    </div>
                    <div class="row mt-2">
                        <label class="fw-bold">Rating</label>
                        <hr />
                        <Virtualize Items="ratings" Context="r" OverscanCount="10">
                            <div @key="@r.ToString()" @onclick="() => OnRatingClickAsync(r)">
                                <label class="@GetSelectedRating(r)">@GetRatingText(r)</label>
                            </div>
                        </Virtualize>
                    </div>
                </div>
                <div class="col-10 px-5">
                    <div class="row">
                        <h1 class="fw-bold text-start">Artifacts</h1>
                        <span class="form-text">Our artifacts come in a wide range of variety!</span>
                        <div class="mt-3">
                            <div class="row">
                                <div class="d-flex justify-content-between">
                                    <span>@(artifacts?.Count) results</span>
                                    <select class="form-select w-25" aria-label="Select your filtering" @onchange="OnSelectChange">
                                        <option value="price">Price &euro;</option>
                                        <option value="rating">Rating</option>
                                    </select>
                                </div>
                            </div>
                            <hr />
                            <div class="row mt-2">
                                @if (artifacts is not null && isArtifactLoading is false)
                                {
                                    <Virtualize Items="artifacts" Context="a" OverscanCount="10">
                                        <div @key="a.Id" @onclick="() => LoadArtifactPage(a)">
                                            @a.Name - @a.Price &euro;
                                        </div>
                                    </Virtualize>
                                }
                                else
                                {
                                    <LoadingTemplate Object="Loading.Artifact" />
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private CategoryModel selectedCategory;
    private EraModel selectedEra;
    private List<CategoryModel> categories;
    private List<ArtifactModel> artifacts;
    private List<EraModel> eras;
    private Rating selectedRating = Rating.ZeroStar;
    private List<Rating> ratings = new()
    {
        Rating.ZeroStar,
        Rating.OneStar,
        Rating.TwoStar,
        Rating.ThreeStar,
        Rating.FourStar,
        Rating.FiveStar,
    };

    private string searchText = "";
    private bool showAllCategories = false;
    private bool showAllEras = false;
    private bool sortByPrice = false;
    private bool isArtifactLoading = false;

    protected override async Task OnInitializedAsync()
    {
        isArtifactLoading = true;
        artifacts = await ArtifactEndpoint.GetAllArtifactsAsync();

        await LoadCategoriesAsync();
        await LoadErasAsync();

        await LoadFilterStateAsync();
        await FilterArtifactsAsync();
    }

    private async Task LoadCategoriesAsync()
    {
        var allCategories = await CategoryEndpoint.GetAllCategoriesAsync();
        categories = showAllCategories ? allCategories : allCategories.Take(5).ToList();
    }

    private async Task LoadErasAsync()
    {
        var allEras = await EraEndpoint.GetAllErasAsync();
        eras = allEras.Take(5).ToList();
    }

    private async Task LoadFilterStateAsync()
    {
        searchText = await SessionStorage.GetItemAsStringAsync(nameof(searchText)) ?? "";
        selectedEra = await SessionStorage.GetItemAsync<EraModel>(nameof(selectedEra)) ?? null;
        selectedCategory = await SessionStorage.GetItemAsync<CategoryModel>(nameof(selectedCategory)) ?? null;
        selectedRating = await SessionStorage.GetItemAsync<Rating>(nameof(selectedRating));
    }

    private async Task SaveFilterStateAsync()
    {
        await SessionStorage.SetItemAsStringAsync(nameof(searchText), searchText);
        await SessionStorage.SetItemAsync<EraModel>(nameof(selectedEra), selectedEra);
        await SessionStorage.SetItemAsync<CategoryModel>(nameof(selectedCategory), selectedCategory);
        await SessionStorage.SetItemAsync<Rating>(nameof(selectedRating), selectedRating);
    }

    private async Task FilterArtifactsAsync()
    {
        isArtifactLoading = true;
        var output = await ArtifactEndpoint.GetAllArtifactsAsync();

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(a => a.Name.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        if (selectedEra is not null)
        {
            output = output.Where(a => a.EraId == selectedEra.Id).ToList();
        }

        if (selectedCategory is not null)
        {
            output = output.Where(a => a.CategoryId == selectedCategory.Id).ToList();
        }

        output = selectedRating switch
        {
            Rating.ZeroStar => output.Where(a => a.Rating >= 0).ToList(),
            Rating.OneStar => output.Where(a => a.Rating >= 1).ToList(),
            Rating.TwoStar => output.Where(a => a.Rating >= 2).ToList(),
            Rating.ThreeStar => output.Where(a => a.Rating >= 3).ToList(),
            Rating.FourStar => output.Where(a => a.Rating >= 4).ToList(),
            Rating.FiveStar => output.Where(a => a.Rating >= 5).ToList(),
            _ => output
        };

        output = sortByPrice
            ? output.OrderByDescending(a => a.Price).ThenByDescending(a => a.Rating).ToList()
            : output.OrderByDescending(a => a.Rating).ThenByDescending(a => a.Price).ToList();

        artifacts = output;
        await SaveFilterStateAsync();

        isArtifactLoading = false;
    }

    private async Task OnSearchInputAsync(string searchInput)
    {
        searchText = searchInput;
        await FilterArtifactsAsync();
    }

    private async Task OnEraClickAsync(EraModel era)
    {
        selectedEra = era;
        await FilterArtifactsAsync();
    }

    private async Task OnCategoryClickAsync(CategoryModel category)
    {
        selectedCategory = category;
        await FilterArtifactsAsync();
    }

    private async Task OnSelectChange(ChangeEventArgs e)
    {
        string selectedValue = e.Value?.ToString();

        if (selectedValue == "price")
        {
            await OnSortChangeAsync(true);
        }
        else if (selectedValue == "rating")
        {
            await OnSortChangeAsync(false);
        }
    }

    private async Task OnSortChangeAsync(bool isPrice)
    {
        sortByPrice = isPrice;
        await FilterArtifactsAsync();
    }

    private async Task OnRatingClickAsync(Rating rating)
    {
        selectedRating = rating;
        await FilterArtifactsAsync();
    }

    private async Task ToggleShowAllCategoriesAsync(bool showAll)
    {
        showAllCategories = showAll;
        await LoadCategoriesAsync();
        StateHasChanged();
    }

    private async Task ToggleShowAllErasAsync(bool showAll)
    {
        showAllEras = showAll;

        if (showAllEras)
        {
            eras = await EraEndpoint.GetAllErasAsync();
        }
        else
        {
            await LoadErasAsync();
        }
    }

    private void ClosePage()
    {
        Navigation.NavigateTo("/");
    }

    private void LoadArtifactPage(ArtifactModel artifact)
    {
        Navigation.NavigateTo($"/Artifact/{artifact.Id}");
    }

    private string GetSelectedEraClass(EraModel era = null)
    {
        if (selectedEra?.Id == era?.Id)
        {
            return "text-success";
        }

        return "";
    }

    private string GetSelectedCategory(CategoryModel category = null)
    {
        if (selectedCategory?.Id == category?.Id)
        {
            return "text-success";
        }

        return "";
    }

    private string GetSelectedRating(Rating rating)
    {
        if (rating == selectedRating)
        {
            return "text-success";
        }

        return "";
    }

    private string GetRatingText(Rating rating)
    {
        string text = rating switch
        {
            Rating.ZeroStar => "Zero star",
            Rating.OneStar => "One star",
            Rating.TwoStar => "Two stars",
            Rating.ThreeStar => "Three stars",
            Rating.FourStar => "Four stars",
            Rating.FiveStar => "Five stars",
            _ => "",
        };

        return $"{text} and above";
    }
}
