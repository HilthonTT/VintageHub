@page "/Listing"
@inject IArtifactEndpoint ArtifactEndpoint
@inject IEraEndpoint EraEndpoint
@inject ICategoryEndpoint CategoryEndpoint
@inject ISessionStorageService SessionStorage
@inject NavigationManager Navigation
@attribute [Authorize]

<MudGrid>
    <MudItem xs="3">
        <MudItem xs="12">
            <MudText Typo="Typo.h6">Categories</MudText>
            <MudDivider Class="mt-3 mb-3" />
            <MudItem xs="12">
                <MudButton OnClick="() => OnCategoryClickAsync(null)" Color="@GetSelectedCategory()" Class="mt-1 mb-1">
                    All
                </MudButton>
            </MudItem>
            @if (categories is not null)
            {
                <MudVirtualize Items="categories" Context="c" OverscanCount="10">
                    <MudItem xs="12">
                        <MudButton @key="@c.Id" Class="mt-1 mb-1" Color="@GetSelectedCategory(c)"
                                   OnClick="() => OnCategoryClickAsync(c)">
                            @c.Name
                        </MudButton>
                    </MudItem>
                </MudVirtualize>
            }
            <MudButton OnClick="() => ToggleShowAllCategoriesAsync(!showAllCategories)" Color="Color.Secondary"
                       Size="Size.Small">
                @((showAllCategories ? "See Less" : "Show More"))
            </MudButton>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.h6">Eras</MudText>
            <MudDivider Class="mt-3 mb-3" />
            <MudItem xs="12">
                <MudButton OnClick="() => OnEraClickAsync(null)" Color="@GetSelectedEraClass()" Class="mt-1 mb-1">
                    All
                </MudButton>
            </MudItem>
            @if (eras is not null)
            {
                <MudVirtualize Items="eras" Context="e" OverscanCount="10">
                    <MudItem xs="12">
                        <MudButton @key="@e.Id" Class="mt-1 mb-1" Color="@GetSelectedEraClass(e)"
                                   OnClick="() => OnEraClickAsync(e)">
                            @e.Name
                        </MudButton>
                    </MudItem>
                </MudVirtualize>
            }
            <MudButton OnClick="() => ToggleShowAllErasAsync(!showAllEras)" Color="Color.Secondary"
                       Size="Size.Small">
                @((showAllEras ? "See Less" : "Show More"))
            </MudButton>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.h6">Rating</MudText>
            <MudDivider Class="mt-3 mb-3" />
            <MudVirtualize Items="ratings" Context="r" OverscanCount="10">
                <MudItem xs="12" @onclick="() => OnRatingClickAsync(r)">
                    <MudRating SelectedValue="@GetRatingValue(r)" Color="@GetSelectedRating(r)" />
                </MudItem>
            </MudVirtualize>
        </MudItem>
    </MudItem>
    <MudItem xs="9">
        <MudItem>
            <MudText Typo="Typo.h4" Class="fw-bold text-uppercase">
                Artifacts
            </MudText>
            <MudText Typo="Typo.body1">
                Our Artifacts appear in a wide range of variety! You just have to choose wisely!
            </MudText>
            <MudDivider />
        </MudItem>
        <MudItem Class="mt-5">
            <MudGrid>
                <MudItem xs="10">
                    <MudText>@artifacts?.Count results</MudText>
                </MudItem>
                <MudItem xs="2">
                    <MudSelect T="string" ValueChanged="((e) => OnSelectChange(e))"
                               Label="Ordering" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="@("rating")">Rating</MudSelectItem>
                        <MudSelectItem Value="@("price")">Price &euro;</MudSelectItem>
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem>
            <MudAutocomplete T="string" Label="Search"
                             SearchFunc="SearchArtifactsAsync" ResetValueOnEmptyText="true"
                             ValueChanged="OnSearchInputAsync"/>
        </MudItem>
        <MudDivider Class="mb-3 mt-3"/>
        <MudItem>
            <MudGrid Justify="Justify.Center">
                @if (artifacts is not null)
                {
                    <MudVirtualize Items="artifacts" Context="a">
                        <ArtifactTemplate @key="a.Id" Artifact="a" />
                    </MudVirtualize>
                }
            </MudGrid>
        </MudItem>
    </MudItem>
</MudGrid>

@code {
    private CategoryModel selectedCategory;
    private EraModel selectedEra;
    private List<CategoryModel> categories;
    private List<ArtifactModel> artifacts;
    private List<EraModel> eras;
    private Rating selectedRating = Rating.ZeroStar;
    private List<Rating> ratings = new()
    {
        Rating.ZeroStar,
        Rating.OneStar,
        Rating.TwoStar,
        Rating.ThreeStar,
        Rating.FourStar,
        Rating.FiveStar,
    };

    private string searchText = "";
    private bool showAllCategories = false;
    private bool showAllEras = false;
    private bool sortByPrice = false;
    private bool isArtifactLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadFilterStateAsync();
        await FilterArtifactsAsync();

        await LoadCategoriesAsync();
        await LoadErasAsync();
    }

    private async Task LoadCategoriesAsync()
    {
        var allCategories = await CategoryEndpoint.GetAllCategoriesAsync();
        categories = showAllCategories ? allCategories : allCategories.Take(5).ToList();
    }

    private async Task LoadErasAsync()
    {
        var allEras = await EraEndpoint.GetAllErasAsync();
        eras = showAllEras ? allEras : allEras.Take(5).ToList();
    }

    private async Task<IEnumerable<string>> SearchArtifactsAsync(string value)
    {
        searchText = value;
        var output = await ArtifactEndpoint.GetAllArtifactsAsync();

        return output.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)).Select(x => x.Name);
    }

    private async Task LoadFilterStateAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParameters = HttpUtility.ParseQueryString(uri.Query);

        searchText = queryParameters["searchText"] is not null
            ? searchText = queryParameters["searchText"]
            : searchText = await SessionStorage.GetItemAsStringAsync(nameof(searchText)) ?? "";

        selectedRating = queryParameters["rating"] is not null
           ? Enum.TryParse(queryParameters["rating"], out Rating parsedRating)
               ? parsedRating
               : Rating.ZeroStar
           : await SessionStorage.GetItemAsync<Rating>(nameof(selectedRating));

        selectedEra = queryParameters["eraId"] is not null
            ? selectedEra = await EraEndpoint.GetEraByIdAsync(int.Parse(queryParameters["eraId"]))
            : selectedEra = await SessionStorage.GetItemAsync<EraModel>(nameof(selectedEra)) ?? null;

        selectedCategory = queryParameters["categoryId"] is not null
            ? selectedCategory = await CategoryEndpoint.GetCategoryByIdAsync(int.Parse(queryParameters["categoryId"]))
            : selectedCategory = await SessionStorage.GetItemAsync<CategoryModel>(nameof(selectedCategory)) ?? null;

        sortByPrice = queryParameters["sortByPrice"] is not null
            ? sortByPrice = bool.Parse(queryParameters["sortByPrice"])
            : sortByPrice = await SessionStorage.GetItemAsync<bool>(nameof(sortByPrice));
    }

    private async Task SaveFilterStateAsync()
    {
        await SessionStorage.SetItemAsStringAsync(nameof(searchText), searchText ?? "");
        await SessionStorage.SetItemAsync(nameof(selectedEra), selectedEra);
        await SessionStorage.SetItemAsync(nameof(selectedCategory), selectedCategory);
        await SessionStorage.SetItemAsync(nameof(selectedRating), selectedRating);
        await SessionStorage.SetItemAsync(nameof(sortByPrice), sortByPrice);
    }

    private async Task FilterArtifactsAsync()
   {
        isArtifactLoading = true;
        var output = await ArtifactEndpoint.GetAllArtifactsAsync();

        if (string.IsNullOrWhiteSpace(searchText) is false)
        {
            output = output.Where(a => a.Name.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        if (selectedEra is not null)
        {
            output = output.Where(a => a.EraId == selectedEra.Id).ToList();
        }

        if (selectedCategory is not null)
        {
            output = output.Where(a => a.CategoryId == selectedCategory.Id).ToList();
        }

        output = selectedRating switch
        {
            Rating.ZeroStar => output.Where(a => a.Rating >= 0).ToList(),
            Rating.OneStar => output.Where(a => a.Rating >= 1).ToList(),
            Rating.TwoStar => output.Where(a => a.Rating >= 2).ToList(),
            Rating.ThreeStar => output.Where(a => a.Rating >= 3).ToList(),
            Rating.FourStar => output.Where(a => a.Rating >= 4).ToList(),
            Rating.FiveStar => output.Where(a => a.Rating >= 5).ToList(),
            _ => output
        };

        output = sortByPrice
            ? output.OrderByDescending(a => a.Price).ThenByDescending(a => a.Rating).ToList()
            : output.OrderByDescending(a => a.Rating).ThenByDescending(a => a.Price).ToList();

        artifacts = output;
        await SaveFilterStateAsync();

        isArtifactLoading = false;
    }

    private async Task OnSearchInputAsync(string searchInput)
    {
        if (string.IsNullOrWhiteSpace(searchInput))
        {
            searchText = "";
        }

        searchText = searchInput;
        await FilterArtifactsAsync();
    }

    private async Task OnEraClickAsync(EraModel era)
    {
        selectedEra = era;
        await FilterArtifactsAsync();
    }

    private async Task OnCategoryClickAsync(CategoryModel category)
    {
        selectedCategory = category;
        await FilterArtifactsAsync();
    }

    private async Task OnSelectChange(string value)
    {
        value = value.ToLower();

        switch (value)
        {
            case "price":
                sortByPrice = true;
                break;
            case "rating":
                sortByPrice = false;
                break;
            default:
                break;
        }

        await FilterArtifactsAsync();
    }

    private async Task OnRatingClickAsync(Rating rating)
    {
        selectedRating = rating;
        await FilterArtifactsAsync();
    }

    private async Task ToggleShowAllCategoriesAsync(bool showAll)
    {
        showAllCategories = showAll;
        await LoadCategoriesAsync();
    }

    private async Task ToggleShowAllErasAsync(bool showAll)
    {
        showAllEras = showAll;
        await LoadErasAsync();     
    }

    private void ClosePage()
    {
        Navigation.NavigateTo("/");
    }

    private Color GetSelectedEraClass(EraModel era = null)
    {
        if (selectedEra?.Id == era?.Id)
        {
            return Color.Success;
        }

        return Color.Default;
    }

    private Color GetSelectedCategory(CategoryModel category = null)
    {
        if (selectedCategory?.Id == category?.Id)
        {
            return Color.Success;
        }

        return Color.Default;
    }

    private int GetRatingValue(Rating rating)
    {
        return rating switch
        {
            Rating.ZeroStar => 0,
            Rating.OneStar => 1,
            Rating.TwoStar => 2,
            Rating.ThreeStar => 3,
            Rating.FourStar => 4,
            Rating.FiveStar => 5,
            _ => 0,
        };
    }

    private Color GetSelectedRating(Rating rating)
    {
        if (selectedRating == rating)
        {
            return Color.Success;
        }

        return Color.Default;
    }
}
