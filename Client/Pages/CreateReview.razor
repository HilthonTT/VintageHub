@page "/Artifact/{Id:int}/Review"
@inject IArtifactEndpoint ArtifactEndpoint
@inject IImageEndpoint ImageEndpoint
@inject IReviewEndpoint ReviewEndpoint
@inject IUserEndpoint UserEndpoint
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Create A Review</PageTitle>

@if (noArtifact)
{
    <MudAlert Severity="Severity.Error" CloseIcon="@Icons.Material.Filled.Close"
              CloseIconClicked="ClosePage" ShowCloseIcon="true">
        No Artifact found with this ID.
    </MudAlert>
}
else if (isCreatingReview is false)
{
    <MudGrid Class="mt-3 mb-5">
        @if (string.IsNullOrWhiteSpace(errorMessage) is false)
        {
            <MudAlert Severity="Severity.Error" Elevation="3">
                @errorMessage
            </MudAlert>
        }
        <MudItem xs="12">
            <EditForm Model="review" OnValidSubmit="CreateReviewAsync">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardMedia Image="@((string.IsNullOrWhiteSpace(imageSource) ? "https://dummyimage.com/600x400/000/fff" : imageSource))"
                                  Height="200" />
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText>
                                <div class="d-flex">
                                    <MudText Color="Color.Default" Typo="Typo.h6" Class="mx-1">Make A Review for </MudText>
                                    <MudText Color="Color.Primary" Typo="Typo.h6">'@artifact?.Name'</MudText>
                                </div>
                            </MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="RedirectArtifactPage" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudItem xs="12">
                            <MudItem>
                                <MudTextField @bind-Value="review.Title" T="string" Label="Review Title"
                                              Required="true" Variant="Variant.Outlined"
                                              RequiredError="The title is required." 
                                              Clearable="true"/>
                                <MudText Color="Color.Error">
                                    <ValidationMessage For="() => review.Title"/>
                                </MudText>
                            </MudItem>
                            <MudItem>
                                <MudTextField @bind-Value="review.Description" T="string" Label="Review Description"
                                              Required="true" Lines="2" Variant="Variant.Outlined"
                                              RequiredError="The description is required." 
                                              Clearable="true"/>
                                <MudText Color="Color.Error">
                                    <ValidationMessage For="() => review.Description"/>
                                </MudText>
                            </MudItem>
                        </MudItem>
                        <MudDivider Class="mt-3 mb-3"/>
                        <MudText Typo="Typo.subtitle1">Your Rating.</MudText>
                        <MudItem xs="12">
                            <MudRating SelectedValue="review.Rating" Size="Size.Large" MaxValue="5"></MudRating>
                            <MudText Color="Color.Error">
                                <ValidationMessage For="() => review.Rating"/>
                            </MudText>
                        </MudItem>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                                    Color="Color.Primary" Class="ml-auto" Size="Size.Large">
                            Make Review
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
        </MudItem>
    </MudGrid>
}
else
{
    <LoadingTemplate />
}

@code {
    [Parameter]
    public int Id { get; set; }

    private CreateReviewModel review = new();
    private UserModel loggedInUser;
    private ArtifactModel artifact;
    private string errorMessage = "";
    private string imageSource = "";
    private bool isCreatingReview = false;
    private bool noArtifact = false;

    protected override async Task OnInitializedAsync()
    {
        artifact = await ArtifactEndpoint.GetArtifactByIdAsync(Id);

        if (artifact is null)
        {
            noArtifact = true;
            return;
        }

        loggedInUser = await AuthProvider.GetUserFromAuth(UserEndpoint);
        imageSource = await ImageEndpoint.GetImageAsync(artifact.ImageId);
    }

    private void ClosePage()
    {
        Navigation.NavigateTo("/");
    }

    private void RedirectArtifactPage()
    {
        Navigation.NavigateTo($"/Artifact/{Id}");
    }

    private bool IsReviewInvalid()
    {
        if (artifact is null)
        {
            errorMessage = "The artifact is currently unavailable.";
            return true;
        }

        if (loggedInUser is null)
        {
            errorMessage = "It appears there has been an error identifying you. Try logging in again.";
            return true;
        }

        return false;
    }

    private async Task CreateReviewAsync()
    {
        errorMessage = "";
        var newReview = new ReviewModel
        {
            ArtifactId = artifact.Id,
            UserId = loggedInUser.Id,
            Title = review.Title,
            Description = review.Description,
            Rating = review.Rating,
        };

        if (IsReviewInvalid())
        {
            return;
        }

        isCreatingReview = true;

        await ReviewEndpoint.InsertReviewAsync(newReview);

        review = new();
        isCreatingReview = false;
        RedirectArtifactPage();
    }
}
