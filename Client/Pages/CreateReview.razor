@page "/Artifact/{Id:int}/Review"
@inject IArtifactEndpoint ArtifactEndpoint
@inject IReviewEndpoint ReviewEndpoint
@inject IUserEndpoint UserEndpoint
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@attribute [Authorize]

@if (isCreatingReview)
{
    <LoadingTemplate Object="Loading.ReviewCreate" />
}
else
{
    <div class="container">
        @if (string.IsNullOrWhiteSpace(errorMessage) is false)
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }
        <h1 class="text-center fw-bold">Create A Review</h1>
        <div class="text-center fw-bold">
            You are currently creating a review for the artifact " @artifact?.Name "
        </div>
        <div class="row">
            <div class="col-12 justify-content-center">
                <div class="row mb-4">
                    <div class="d-flex justify-content-end">
                        <button @onclick="ClosePage" class="btn btn-close"></button>
                    </div>
                    <div class="col-12">
                        <EditForm Model="review" OnValidSubmit="CreateReviewAsync">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="row">
                                <div class="mt-2">
                                    <label class="form-label" for="review-title">Review Title</label>
                                    <div class="form-text" id="review-title">Enter the review's title.</div>
                                    <InputText @bind-Value="review.Title" class="form-control" />
                                </div>
                                <div class="mt-2">
                                    <label class="form-label" for="review-description">Review Description</label>
                                    <div class="form-text" id="review-description">
                                        Provide your experience with the artifact or vendor.
                                    </div>
                                    <InputTextArea @bind-Value="review.Description" class="form-control" />
                                </div>
                                <div class="mt-2">
                                    <label class="form-label" for="review-rating">The Rating</label>
                                    <div class="form-text">
                                        How are you feeling with the artifact?
                                        Please provide us a rating about it.
                                    </div>
                                    <input class="form-range" type="range" min="0" max="5" step="0.5" @bind="review.Rating" />
                                    <div>
                                        <span>Your rating:</span>
                                        <span class="text-danger">@review.Rating out of 5 stars.</span>
                                    </div>
                                </div>
                            </div>
                            <div class="text-center">
                                <button type="submit" class="btn btn-primary text-uppercase">
                                    Create
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private CreateReviewModel review = new();
    private UserModel loggedInUser;
    private ArtifactModel artifact;
    private string errorMessage = "";
    private bool isCreatingReview = false;

    protected override async Task OnInitializedAsync()
    {
        loggedInUser = await AuthProvider.GetUserFromAuth(UserEndpoint);
        artifact = await ArtifactEndpoint.GetArtifactByIdAsync(Id);
    }

    private void ClosePage()
    {
        Navigation.NavigateTo($"/Artifact/{Id}");
    }

    private bool IsReviewInvalid()
    {
        if (artifact is null)
        {
            errorMessage = "The artifact is currently unavailable.";
            return true;
        }

        if (loggedInUser is null)
        {
            errorMessage = "It appears there has been an error identifying you. Try logging in again.";
            return true;
        }

        return false;
    }

    private async Task CreateReviewAsync()
    {
        errorMessage = "";
        var newReview = new ReviewModel
        {
            ArtifactId = artifact.Id,
            UserId = loggedInUser.Id,
            Title = review.Title,
            Description = review.Description,
            Rating = review.Rating,
        };

        if (IsReviewInvalid())
        {
            return;
        }

        isCreatingReview = true;

        await ReviewEndpoint.InsertReviewAsync(newReview);

        review = new();
        isCreatingReview = false;
        ClosePage();
    }
}
