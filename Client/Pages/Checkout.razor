@page "/Checkout/{Guid}"
@inject IStringLocalizer<Resource> Localizer
@inject IShoppingCartStorage ShoppingCartStorage
@inject ISessionStorageService SessionStorage
@inject IUserEndpoint UserEndpoint
@inject IOrderEndpoint OrderEndpoint
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation

@if (isLoading)
{
    <LoadingTemplate />
}
else if (isAllowed)
{
    <MudGrid Class="mt-3 mb-5">
        @if (string.IsNullOrWhiteSpace(errorMessage) is false)
        {
            <MudAlert Severity="Severity.Error" Elevation="3">
                @errorMessage
            </MudAlert>
        }
        <MudItem xs="9">
            <EditForm Model="payment" OnValidSubmit="ConfirmOrderAsync">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6" Class="text-uppercase fw-bold">
                                <MudIcon Icon="@Icons.Material.Filled.CreditCard" />
                                @Localizer["checkout"]
                            </MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="ClosePage" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="6">
                                <MudTextField @bind-Value="payment.CreditCardNumber"
                                              Required="true" Label=@Localizer["credit-card-number"] Clearable="true"
                                              Variant="Variant.Outlined" 
                                              HelperText=@Localizer["credit-card-number-description"] />
                                <MudText Color="Color.Error">
                                    <ValidationMessage For="() => payment.CreditCardNumber" />
                                </MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField @bind-Value="payment.CardholderName"
                                              Required="true" Label="@Localizer["credit-card-cardholder"]" Clearable="true"
                                              Variant="Variant.Outlined" 
                                              HelperText=@Localizer["credit-card-cardholder-description"] />
                                <MudText Color="Color.Error">
                                    <ValidationMessage For="() => payment.CardholderName" />
                                </MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudNumericField @bind-Value="payment.ExpirationMonth"
                                                 Required="true" Label="@Localizer["credit-card-expiration-month"]" Clearable="true"
                                                 Variant="Variant.Outlined"
                                                 HelperText=@Localizer["credit-card-expiration-month-description"] />
                                <MudText Color="Color.Error">
                                    <ValidationMessage For="() => payment.ExpirationMonth"/>
                                </MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudNumericField @bind-Value="payment.ExpirationYear"
                                                 Required="true" Label=@Localizer["credit-card-expiration-year"] Clearable="true"
                                                 Variant="Variant.Outlined"
                                                 HelperText=@Localizer["credit-card-expiration-description"] />
                                <MudText Color="Color.Error">
                                    <ValidationMessage For="() => payment.ExpirationYear" />
                                </MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField @bind-Value="payment.CVV"
                                              Required="true" Label=@Localizer["credit-card-cvv"] Clearable="true"
                                              Variant="Variant.Outlined" 
                                              HelperText="@Localizer["credit-card-cvv-description"]" />
                                <MudText Color="Color.Error">
                                    <ValidationMessage For="() => payment.CVV" />
                                </MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField @bind-Value="payment.BillingAddress"
                                              Required="true" Label=@Localizer["credit-card-billing-address"] Clearable="true"
                                              Variant="Variant.Outlined"
                                              HelperText=@Localizer["credit-card-billing-address-description"] />
                                <MudText Color="Color.Error">
                                    <ValidationMessage For="() => payment.BillingAddress" />
                                </MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField @bind-Value="payment.City"
                                              Required="true" Label=@Localizer["credit-card-city"] Clearable="true"
                                              Variant="Variant.Outlined" 
                                              HelperText=@Localizer["credit-card-city-description"] />
                                <MudText Color="Color.Error">
                                    <ValidationMessage For="() => payment.City" />
                                </MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField @bind-Value="payment.State"
                                              Required="true" Label=@Localizer["credit-card-state"] Clearable="true"
                                              Variant="Variant.Outlined"
                                              HelperText=@Localizer["credit-card-state-description"] />
                                <MudText Color="Color.Error">
                                    <ValidationMessage For="() => payment.State" />
                                </MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField @bind-Value="payment.PostalCode"
                                              Required="true" Label=@Localizer["credit-card-postal-code"] Clearable="true"
                                              Variant="Variant.Outlined"
                                              HelperText="@Localizer["credit-card-postal-code-description"]" />
                                <MudText Color="Color.Error">
                                    <ValidationMessage For="() => payment.PostalCode" />
                                </MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField @bind-Value="payment.Country"
                                              Required="true" Label=@Localizer["credit-card-country"] Clearable="true"
                                              Variant="Variant.Outlined"
                                              HelperText=@Localizer["credit-card-country-description"]/>
                                <MudText Color="Color.Error">
                                    <ValidationMessage For="() => payment.Country" />
                                </MudText>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Color="Color.Primary" Variant="Variant.Outlined" ButtonType="ButtonType.Submit">
                            @Localizer["confirm-payment"]
                        </MudButton>
                    </MudCardActions>
                </MudCard>
                <MudExpansionPanels Style="flex:1" Class="mt-5">
                    <MudExpansionPanel Text="@Localizer["show-events"]">
                        @foreach (string message in events)
                        {
                            <MudText Typo="@Typo.body2" Class="text-break">
                                @message
                            </MudText>
                        }
                        @if (events.Count > 0)
                        {
                            <div class="d-flex">
                                <MudSpacer />
                                <MudButton Class="mt-3" ButtonType="ButtonType.Button"
                                           Variant="Variant.Filled" OnClick="@(() => events.Clear())">
                                    @Localizer["clear"]
                                </MudButton>
                            </div>
                        }
                    </MudExpansionPanel>
                </MudExpansionPanels>
            </EditForm>
        </MudItem>
        <MudItem xs="3">
            <MudPaper Class="p-2">
                <MudGrid>
                    <MudItem xs="12">
                        <MudText Typo="Typo.h5" Class="fw-bold text-uppercase">
                            <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" /> 
                            @Localizer["shopping-cart"]
                        </MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText Typo="Typo.body1" Class="fw-bold text-uppercase">
                            @Localizer["information"]
                        </MudText>
                        <MudDivider />
                        <MudItem xs="12">
                            <MudItem>
                                <MudText Color="Color.Default">@Localizer["total-price"]</MudText>
                                <MudText Color="Color.Error" Class="mt-1">@totalPrice &euro;</MudText>
                            </MudItem>
                        </MudItem>
                        <MudDivider Class="mt-3 mb-3" />
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
}
else
{
    <MudAlert Severity="Severity.Error" CloseIcon="@Icons.Material.Filled.Close"
              CloseIconClicked="ClosePage" ShowCloseIcon="true">
        @Localizer["not-allowed"]
    </MudAlert>
}

@code {
    [Parameter]
    public string Guid { get; set; }

    private CreditCardPaymentModel payment = new();
    private List<string> events = new();
    private UserModel loggedInUser;
    private ShoppingCartModel shoppingCart;
    private string errorMessage = "";
    private decimal totalPrice = 0;
    private bool isLoading = true;
    private bool isAllowed = false;

    protected override async Task OnInitializedAsync()
    {
        payment.ExpirationYear = DateTime.UtcNow.Year;
        payment.ExpirationMonth = DateTime.UtcNow.Month;

        loggedInUser = await AuthProvider.GetUserFromAuth(UserEndpoint);
        shoppingCart = await ShoppingCartStorage.GetShoppingCartAsync();
        CalculatePrice();

        isAllowed = await IsAllowedAsync();
        isLoading = false;
    }

    private void CalculatePrice()
    {
        decimal price = 0;

        var uniqueArtifacts = new Dictionary<int, int>();

        foreach (var item in shoppingCart.CartItems)
        {
            if (uniqueArtifacts.ContainsKey(item.Artifact.Id) is false)
            {
                uniqueArtifacts[item.Artifact.Id] = 0;
            }

            uniqueArtifacts[item.Artifact.Id] += item.Quantity;
        }

        foreach (var kvp in uniqueArtifacts)
        {
            price += (decimal)shoppingCart.CartItems.First(i => i.Artifact.Id == kvp.Key).Artifact.Price * kvp.Value;
        }

        totalPrice = price;
        payment.PaymentAmount = totalPrice;
    }

    private void ClosePage()
    {
        Navigation.NavigateTo("/");
    }

    private bool CanCheckout()
    {
        if (shoppingCart?.CartItems?.Count <= 0 || loggedInUser is null)
        {
            return false;
        }

        return true;
    }

    private OrderModel GetOrder()
    {
        return new OrderModel()
            {
                UserId = loggedInUser.Id,
                TotalPrice = totalPrice,
                IsCanceled = false,
                IsComplete = false,
                DateOrdered = DateTime.UtcNow,
            };
    }

    private List<OrderDetailsModel> GetOrderDetails()
    {
        var orderDetails = new List<OrderDetailsModel>();

        foreach (var item in shoppingCart.CartItems)
        {
            var details = new OrderDetailsModel
                {
                    ArtifactId = item.Artifact.Id,
                    Quantity = item.Quantity,
                };

            orderDetails.Add(details);
        }

        return orderDetails;
    }

    private async Task<bool> IsAllowedAsync()
    {
        string guid = await SessionStorage.GetItemAsStringAsync("CheckoutGuid");

        return Guid == guid;
    }

    private async Task ConfirmOrderAsync()
    {
        if (CanCheckout() is false)
        {
            return;
        }

        try
        {
            errorMessage = "";

            string jsonifiedPayment = JsonSerializer.Serialize(payment);
            events.Add($"{Localizer["payment-confirmed"]} \n {jsonifiedPayment}");

            var newOrder = GetOrder();
            var orderDetails = GetOrderDetails();

            var request = new OrderRequestModel(newOrder, orderDetails);

            shoppingCart.CartItems.Clear();
            await ShoppingCartStorage.SaveShoppingCartAsync(shoppingCart);

            await OrderEndpoint.InsertOrderAsync(request);

            ClosePage();
        }
        catch
        {
            errorMessage = Localizer["credit-card-error"];
        }
    }
}
