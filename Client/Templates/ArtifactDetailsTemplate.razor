@inject IImageEndpoint ImageEndpoint
@inject IShoppingCartStorage ShoppingCartStorage
@inject NavigationManager Navigation

<MudCard Class="m-2">
    <MudCardMedia Image="@((string.IsNullOrWhiteSpace(imageSource) ? "https://dummyimage.com/600x400/000/fff" : imageSource))"
                    Height="200" alt="@Artifact?.Name" />
    <MudCardContent>
        <MudText Typo="Typo.h5">@Artifact?.Name</MudText>
        <MudDivider Class="mt-3 mb-3" />
        <MudText Typo="Typo.body1">Price: @Artifact?.Price.ToString("0.####") &euro;</MudText>
        <MudText Typo="Typo.body2">@Artifact.Vendor?.Name</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton OnClick="AddToCartAsync" Variant="Variant.Text"
                   Color="Color.Error" StartIcon="@Icons.Material.Filled.AddShoppingCart" Disabled="!canAddToCart">
            Add to Cart
        </MudButton>
        <MudButton OnClick="OpenDetails" Variant="Variant.Text"
                    Color="Color.Primary" StartIcon="@Icons.Material.Filled.Details">
            Learn More
        </MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter]
    [EditorRequired]
    public ArtifactDisplayModel Artifact { get; set; }

    private ShoppingCartModel shoppingCart;
    private string imageSource = "";
    private bool canAddToCart = false;

    protected override async Task OnInitializedAsync()
    {
        imageSource = ImageEndpoint.GetImage(Artifact.ImageId);
        shoppingCart = await ShoppingCartStorage.GetShoppingCartAsync();

        canAddToCart = CanAddToCart();
    }

    private void OpenDetails()
    {
        Navigation.NavigateTo($"/Artifact/{Artifact.Id}", true);
    }

    private bool CanAddToCart()
    {
        var item = shoppingCart.CartItems.FirstOrDefault(x => x.Artifact.Id == Artifact.Id);

        if (item is not null || Artifact.Quantity <= 0)
        {
            return false;
        }

        return true;
    }

    private async Task AddToCartAsync()
    {
        if (canAddToCart is false || shoppingCart is null)
        {
            return;
        }

        canAddToCart = false;
        var newCartItem = new CartItemModel
            {
                Artifact = Artifact,
                Quantity = 1,
            };

        shoppingCart.CartItems.Add(newCartItem);

        await ShoppingCartStorage.SaveShoppingCartAsync(shoppingCart);
    }
}
