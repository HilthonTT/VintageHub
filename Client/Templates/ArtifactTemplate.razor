@inject IImageEndpoint ImageEndpoint
@inject IVendorEndpoint VendorEndpoint
@inject IShoppingCartStorage ShoppingCartStorage
@inject NavigationManager Navigation

<MudItem xs="4">
    <MudCard Class="m-2">
        @if (RemoveEvent.HasDelegate)
        {
            <MudCardHeader>
                <CardHeaderContent />
                <CardHeaderActions>
                    <MudIconButton OnClick="RemoveAsync" Icon="@Icons.Material.Filled.Close" />
                </CardHeaderActions>
            </MudCardHeader>
        }
        <MudCardMedia Image="@((string.IsNullOrWhiteSpace(imageSource) ? "https://dummyimage.com/600x400/000/fff" : imageSource))"
                      Height="200" alt="@Artifact?.Name" />
        <MudCardContent>
            <MudText Typo="Typo.h5">@Artifact?.Name</MudText>
            <MudText Typo="Typo.body2">@Artifact?.Description</MudText>
            <MudDivider Class="mt-3 mb-3" />
            <MudText Typo="Typo.body1">Price: @Artifact?.Price.ToString("0.####") &euro;</MudText>
            <MudText Typo="Typo.body2">This artifact is sold by: @vendor?.Name</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton OnClick="AddToCartAsync" Variant="Variant.Text" Disabled="!canAddToCart"
                       Color="Color.Error" StartIcon="@Icons.Material.Filled.AddShoppingCart">
                Add to Cart
            </MudButton>
            <MudButton OnClick="OpenDetails" Variant="Variant.Text"
                       Color="Color.Primary" StartIcon="@Icons.Material.Filled.Details">
                Learn More
            </MudButton>
        </MudCardActions>
    </MudCard>
</MudItem>

@code {
    [Parameter]
    [EditorRequired]
    public ArtifactModel Artifact { get; set; }

    [Parameter]
    public EventCallback<ArtifactModel> RemoveEvent { get; set; }

    private VendorModel vendor;
    private ShoppingCartModel shoppingCart;
    private string imageSource = "";
    private bool canAddToCart = false;

    protected override async Task OnInitializedAsync()
    {
        imageSource = ImageEndpoint.GetImage(Artifact.ImageId);
        vendor = await VendorEndpoint.GetVendorByIdAsync(Artifact.VendorId);
        shoppingCart = await ShoppingCartStorage.GetShoppingCartAsync();

        canAddToCart = CanAddToCart();
    }

    private void OpenDetails()
    {
        Navigation.NavigateTo($"/Artifact/{Artifact.Id}");
    }

    private bool CanAddToCart()
    {
        var item = shoppingCart.CartItems.FirstOrDefault(x => x.Artifact.Id == Artifact.Id);

        if (item is not null || Artifact.Quantity <= 0)
        {
            return false;
        }

        return true;
    }

    private async Task RemoveAsync()
    {
        await RemoveEvent.InvokeAsync(Artifact);
    }

    private async Task AddToCartAsync()
    {
        if (canAddToCart is false || shoppingCart is null)
        {
            return;
        }

        canAddToCart = false;
        var newCartItem = new CartItemModel
            {
                Artifact = Artifact,
                Quantity = 1,
            };

        shoppingCart.CartItems.Add(newCartItem);

        await ShoppingCartStorage.SaveShoppingCartAsync(shoppingCart);
    }
}
