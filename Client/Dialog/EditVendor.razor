@inject IStringLocalizer<Resource> Localizer
@inject IVendorEndpoint VendorEndpoint
@inject IImageEndpoint ImageEndpoint
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<EditForm Model="model" OnValidSubmit="EditVendorAsync">
    <DataAnnotationsValidator />
    <MudDialog Options="options">
        <DialogContent>
            @if (isCurrentlyEditing)
            {
                <LoadingTemplate ShowDescription="false" />
            }
            else
            {
                <MudItem>
                    <MudText>
                        You are now currently editing your vendor.
                    </MudText>
                    <MudText>
                        When submitting the edit, you will not visually see the change yet.
                    </MudText>
                </MudItem>
                <MudDivider Class="mt-3 mb-3" />
                <MudItem>
                    <MudGrid Justify="Justify.Center">
                        <MudAvatar Size="Size.Large" Style="width: 7rem; height: 7rem;">
                            <MudImage Width="200" Height="200"
                                      Src="@((string.IsNullOrWhiteSpace(modelImageSource) ? imageSource : modelImageSource))" />
                        </MudAvatar>
                    </MudGrid>
                </MudItem>
                <MudItem>
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="model.Name" Label=@Localizer["vendor-name"]
                                          Required="true" Variant="Variant.Outlined" Clearable="true"
                                          HelperText=@Localizer["vendor-name-description"] />
                            <MudText Color="Color.Error">
                                <ValidationMessage For="() => model.Name" />
                            </MudText>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="model.Description" Label=@Localizer["vendor-description"]
                                          Lines="2" Required="true" Clearable="true" Variant="Variant.Outlined"
                                          HelperText=@Localizer["vendor-description-description"] />
                            <MudText Color="Color.Error">
                                <ValidationMessage For="() => model.Description" />
                            </MudText>
                        </MudItem>
                        <MudItem xs="12">
                            <MudDatePicker @bind-Date="model.DateFounded" Label=@Localizer["vendor-date-founded"]
                                           Required="true"
                                           Clearable="true" Variant="Variant.Outlined"
                                           HelperText=@Localizer["vendor-date-founded-description"] />
                            <MudText Color="Color.Error">
                                <ValidationMessage For="() => model.DateFounded" />
                            </MudText>
                        </MudItem>
                        <MudItem Class="d-flex justify-content-start">
                            <MudFileUpload T="IBrowserFile" FilesChanged="HandleImageSelected" Context="file_context">
                                <ButtonTemplate>
                                    <MudFab HtmlTag="label"
                                            Color="Color.Secondary"
                                            StartIcon="@Icons.Material.Filled.Image"
                                            Label="Load picture"
                                            for="@file_context" />
                                </ButtonTemplate>
                            </MudFileUpload>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            }
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel" Variant="Variant.Filled" ButtonType="ButtonType.Button"
                       StartIcon="@Icons.Material.Filled.Cancel">
                Cancel
            </MudButton>
            <MudButton Color="Color.Success" StartIcon="@Icons.Material.Filled.Edit"
                       Variant="Variant.Filled" ButtonType="ButtonType.Submit">
                Edit
            </MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public VendorDisplayModel Vendor { get; set; }

    [Parameter]
    public UserModel LoggedInUser { get; set; }

    private CreateVendorModel model = new();
    private IBrowserFile selectedImageFile;
    private bool isAllowed = false;
    private bool isCurrentlyEditing = false;
    private string modelImageSource = "";
    private string imageSource = "";
    private DialogOptions options = new()
    {
        ClassBackground = "dialog-backdrop",
        CloseButton = true,
        CloseOnEscapeKey = true,
    };

    protected override void OnInitialized()
    {
        isAllowed = IsAllowed();
        if (isAllowed is false)
        {
            Cancel();
        }

        imageSource = ImageEndpoint.GetImage(Vendor.ImageId);

        MapModelToVendor();
    }

    private async Task EditVendorAsync()
    {
        if (isAllowed is false)
        {
            Snackbar.Add("You do not have permission to edit the vendor.", Severity.Error);
            Cancel();
        }
        else
        {
            isCurrentlyEditing = true;
            MapVendorToModel();

            if (selectedImageFile?.Size > 0)
            {
                Vendor.ImageId = await ImageEndpoint.UploadImageAsync(selectedImageFile);
            }

            await VendorEndpoint.UpdateVendorAsync(new VendorModel(Vendor));
            isCurrentlyEditing = false;
            Snackbar.Add($"Successfully edited vendor {Vendor.Id}", Severity.Success);
            Cancel();
        }
    }

    private async Task LoadImageSourceAsync()
    {
        if (selectedImageFile is null)
        {
            return;
        }

        using var stream = selectedImageFile.OpenReadStream(selectedImageFile.Size);
        using var memoryStream = new MemoryStream();

        await stream.CopyToAsync(memoryStream);
        byte[] bytes = memoryStream.ToArray();

        modelImageSource = $"data:{selectedImageFile.ContentType};base64,{Convert.ToBase64String(bytes)}";
    }

    private async Task HandleImageSelected(IBrowserFile e)
    {
        selectedImageFile = e;
        await LoadImageSourceAsync();
    }

    private void MapVendorToModel()
    {
        Vendor.Owner.Id = model.OwnerUserId;
        Vendor.Name = model.Name;
        Vendor.Description = model.Description;
        Vendor.DateFounded = model.DateFounded.GetValueOrDefault();
    }

    private void MapModelToVendor()
    {
        model.OwnerUserId = Vendor.Owner.Id;
        model.Name = Vendor.Name;
        model.Description = Vendor.Description;
        model.DateFounded = Vendor.DateFounded;
    }

    private bool IsAllowed()
    {
        if (Vendor?.Owner.Id == LoggedInUser?.Id)
        {
            return true;
        }

        return false;
    }

    private void Cancel()
    {
        MudDialog?.Close();
    }

    private void ClosePage()
    {
        Navigation.NavigateTo("/");
    }
}
